{
  "_args": [
    [
      {
        "raw": "ngx-page-scroll",
        "scope": null,
        "escapedName": "ngx-page-scroll",
        "name": "ngx-page-scroll",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/andrew/PersonalWebsite/frontend"
    ]
  ],
  "_from": "ngx-page-scroll@latest",
  "_id": "ngx-page-scroll@4.0.2",
  "_inCache": true,
  "_location": "/ngx-page-scroll",
  "_nodeVersion": "6.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ngx-page-scroll-4.0.2.tgz_1510229220896_0.20040140976198018"
  },
  "_npmUser": {
    "name": "nolanus",
    "email": "sebastian.fuss@googlemail.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ngx-page-scroll",
    "scope": null,
    "escapedName": "ngx-page-scroll",
    "name": "ngx-page-scroll",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ngx-page-scroll/-/ngx-page-scroll-4.0.2.tgz",
  "_shasum": "0b1b7f26f48f2d55356a19023490052e9fa5a8d9",
  "_shrinkwrap": null,
  "_spec": "ngx-page-scroll",
  "_where": "/home/andrew/PersonalWebsite/frontend",
  "author": {
    "name": "Sebastian Fuss",
    "email": "sebastian.fuss@googlemail.com"
  },
  "bugs": {
    "url": "https://github.com/Nolanus/ngx-page-scroll/issues"
  },
  "dependencies": {},
  "description": "Animated scrolling functionality for angular written in pure typescript",
  "devDependencies": {
    "@angular/animations": "^4.2.6",
    "@angular/common": "^4.2.6",
    "@angular/compiler": "^4.2.6",
    "@angular/compiler-cli": "^4.2.6",
    "@angular/core": "^4.2.6",
    "@angular/platform-browser": "^4.2.6",
    "@angular/platform-browser-dynamic": "^4.2.6",
    "@angular/platform-server": "^4.2.6",
    "@angular/router": "^4.2.6",
    "@types/jasmine": "^2.5.53",
    "codelyzer": "~4.0.1",
    "jasmine-core": "~2.8.0",
    "jasmine-spec-reporter": "~4.2.1",
    "protractor": "~5.2.0",
    "rimraf": "^2.6.1",
    "rollup": "~0.50.0",
    "rollup-plugin-uglify": "^2.0.1",
    "rxjs": "^5.4.2",
    "tslint": "^5.5.0",
    "typescript": "~2.4.2",
    "zone.js": "^0.8.14"
  },
  "directories": {},
  "dist": {
    "shasum": "0b1b7f26f48f2d55356a19023490052e9fa5a8d9",
    "tarball": "https://registry.npmjs.org/ngx-page-scroll/-/ngx-page-scroll-4.0.2.tgz"
  },
  "gitHead": "8d7cebd52ec16c269b0aa25e596cef6ee911347e",
  "homepage": "https://github.com/Nolanus/ngx-page-scroll#readme",
  "keywords": [
    "angular2",
    "angularjs",
    "page",
    "scroll",
    "pagescroll",
    "animate",
    "move",
    "scrollto",
    "anchor"
  ],
  "license": "MIT",
  "main": "bundles/ngx-page-scroll.umd.js",
  "maintainers": [
    {
      "name": "nolanus",
      "email": "sebastian.fuss@googlemail.com"
    }
  ],
  "module": "ngx-page-scroll.js",
  "name": "ngx-page-scroll",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/core": ">=4.2.6 <6.0.0",
    "@angular/common": ">=4.2.6 <6.0.0",
    "@angular/platform-browser": ">=4.2.6 <6.0.0",
    "@angular/router": ">=4.2.6 <6.0.0"
  },
  "readme": "# ngx-page-scroll [![npm version](https://img.shields.io/npm/v/ngx-page-scroll.svg?style=flat)](https://www.npmjs.com/package/ngx-page-scroll) [![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\nAnimated scrolling functionality for angular written in pure typescript\nwith no additional dependencies\n\n[![Build Status](https://travis-ci.org/Nolanus/ngx-page-scroll.svg?branch=master)](https://travis-ci.org/Nolanus/ngx-page-scroll)\n[![Dependency Status](https://david-dm.org/Nolanus/ngx-page-scroll.svg)](https://david-dm.org/Nolanus/ngx-page-scroll)\n[![devDependency Status](https://david-dm.org/Nolanus/ngx-page-scroll/dev-status.svg)](https://david-dm.org/Nolanus/ngx-page-scroll?type=dev)\n[![peerDependency Status](https://david-dm.org/Nolanus/ngx-page-scroll/peer-status.svg)](https://david-dm.org/Nolanus/ngx-page-scroll?type=peer)\n[![Greenkeeper badge](https://badges.greenkeeper.io/Nolanus/ngx-page-scroll.svg)](https://greenkeeper.io/)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/2b93ea8939824803b0807b72a8c2f5a0)](https://www.codacy.com/app/sebastian-fuss/ngx-page-scroll?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=Nolanus/ngx-page-scroll&amp;utm_campaign=Badge_Grade)\n\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/Nolanus.svg)](https://saucelabs.com/u/Nolanus)\n\n## Features\n\n- easy-to-use directive: scroll to an element referenced in the href-attribute \n(`href=\"#mytarget`) just by adding `pageScroll` directive\n- service usage: trigger scroll animations from your component or when server responds\n- customizable: adjust duration, offset or whether scrolling stops if the user interrupts \n([read more](https://github.com/Nolanus/ngx-page-scroll/wiki/Scroll-Interruption-Interference))\n- use custom easing functions to calculate the scroll position over time\n- works across routes (scrolls to target element as soon as the \nrouting has finished) and in both directions (horizontal/vertical)\n\n## Table of contents\n\n- [Setup](#setup)\n- [Usage](#usage)\n    - [Directive](#directive)\n    - [Service](#service)\n- [Configuration](#configuration)\n- [Directive API](#directive-api)\n- [Example app](#example-app)\n\n## Setup\n\nFirst you need to install the npm module:\n```sh\nnpm install ngx-page-scroll --save\n```\n\nThen add the `NgxPageScrollModule` to the imports array of your application module:\n\n```typescript\nimport {NgxPageScrollModule} from 'ngx-page-scroll';\n\n@NgModule({\n    imports: [\n        /* Other imports here */\n        NgxPageScrollModule\n        ]\n})\nexport class AppModule {\n}\n```\n\nTo ensure there's only one instance of a PageScrollService (Singleton) it is recommended to add the \nPageScrollService to only one Injector, preferably the root injector of the application. You may read \nmore about [angular dependency injection hierarchy at their documentation](https://angular.io/docs/ts/latest/guide/hierarchical-dependency-injection.html).\n \nFinally you need to specify how your application should load the ngx-page-scroll library:\n\n#### Angular modules\n\nAll the compiled JavaScript files use ES2015 module format, so they are ready for usage with [RollupJS](http://rollupjs.org/). However, you cannot use them with SystemJS.\n\n`.metadata.json` files are generated for usage with [Angular AoT compiler](https://angular.io/docs/ts/latest/cookbook/aot-compiler.html).\n\n#### SystemJS\n\nUMD bundles are available for SystemJS loading. Example:\n\n```js\nSystem.config({\n    paths: {\n        'npm:': 'node_modules/'\n    },\n    map: {\n        app: 'app',\n\n        '@angular/core'   : 'npm:@angular/core/bundles/core.umd.js',\n        '@angular/common' : 'npm:@angular/common/bundles/common.umd.js',\n        // further angular bundles...\n\n        'ngx-page-scroll': 'npm:ngx-page-scroll/bundles/ngx-page-scroll.umd.js',\n\n        rxjs: 'npm:rxjs',\n    },\n    packages: {\n        app : {defaultExtension: 'js', main: './main.js'},\n        rxjs: {defaultExtension: 'js'}\n    }\n});\n```\n\n## Usage \n\n### Directive\n\nIn your template you may add the `pageScroll` attribute to elements with an `href` attribute pointing towards an id on \nthe same page (e.g. `#theId`). The `onClick` event will be interrupted and the scroll animation starts.\nAlternatively you may set the optional `pageScrolllTarget` property to a valid css selector to specify the \ntarget element to scroll to.\n\n```typescript\n\n@Component({\n   ...\n   template: `...\n        <a pageScroll href=\"#awesomePart\">Take me to the awesomeness</a>\n        <!-- Further content here -->\n        <h2 id=\"awesomePart\">This is where the awesome happens</h2>\n   ...`,\n})\nexport class MyComponent {\n}\n```\n\n### Service\n\nYou may use the service for more advanced scroll animations. Using the service you may trigger scroll \nanimations on any custom event or more complex configuration. Possible use cases are server responses or \nafter content initialization.\n \nStart by obtaining a reference to the `PageScrollService` instance by adding it to your component's \nconstructor. The `PageScrollService` offers a `start()` method to trigger `PageScrollInstance`s. \nA `PageScrollInstance` is an object encapsulating all information relevant for performing a scroll animation.\nYou may create a new `PageScrollInstance` by using the provided factory methods\n`PageScrollInstance#simpleInstance` and `PageScrollInstance#newInstance`.\n\n```typescript\nimport { Component, Inject, ViewChild, ElementRef } from '@angular/core';\nimport { DOCUMENT} from '@angular/common';\nimport { PageScrollConfig, PageScrollService, PageScrollInstance } from 'ngx-page-scroll';\n\n@Component({\n    template: `\n        <p>Main content</p>\n        <!-- Further content here -->\n        <h2 id=\"head2\">Part in a container</h2>\n        <div #container>\n            <p>Container content</p>\n            <h3 id=\"head3\">Heading</h3>\n        </div>`\n})\nexport class MyComponent {\n\n     @ViewChild('container')\n     private container: ElementRef;\n\n     constructor(private pageScrollService: PageScrollService, @Inject(DOCUMENT) private document: any) {\n     }\n\n     public goToHead2(): void {\n         let pageScrollInstance: PageScrollInstance = PageScrollInstance.simpleInstance(this.document, '#head2');\n         this.pageScrollService.start(pageScrollInstance);\n     };    \n     \n     public scrollSomewhereHorizontally(): void {\n         let pageScrollInstance: PageScrollInstance = PageScrollInstance.newInstance({document: this.document, scrollTarget: '#targetToTheRight', verticalScrolling: false});\n         this.pageScrollService.start(pageScrollInstance);\n     }; \n\n     public goToHeadingInContainer(): void {\n         let pageScrollInstance: PageScrollInstance = PageScrollInstance.newInstance({document: this.document, scrollTarget: '.headingClass', scrollingViews: [this.container.nativeElement]});\n         this.pageScrollService.start(pageScrollInstance);\n     };\n }\n ```\n \nThe `PageScrollInstance#newInstance` method takes a `PageScrollOptions` object. Most attributes are the same as attributes for the directive. Refer to [the sources](https://github.com/Nolanus/ngx-page-scroll/blob/master/src/ngx-page-scroll-instance.ts#L13) for a detailed list of options.\n\n## Configuration\n\nThe class `PageScrollConfig` offers static properties to be manipulated to \nconfigure the default behavior. Override the respective properties to change \nall page scroll-animation defaults.\n\n| Configuration Option         | Type        | Default      | Description   |\n| ---------------------------- | ----------- | ------------ |-------------- |\n| `defaultScrollOffset`        | number      | 0            | Pixels to offset from the top of the element when scrolling to (positive value = scrolling will stop given pixels atop the target element).\n| `defaultIsVerticalScrolling` | boolean     | true         | Whether the scroll should happen to the target element in vertical direction (`true`, default) or horizontal (`false`)\n| `defaultDuration`            | number      | 1250         | Duration in milliseconds the whole scroll-animation should last.\n| `defaultInterruptible`       | boolean     | true         | Whether the scroll animation should stop if the user interferes with it (`true`) or not (`false`).\n| `defaultEasingLogic`         | EasingLogic | linearEasing | Easing method to be used while calculating the scroll position over time (default is linear easing).\n\n### Example\n\n```typescript\nimport {PageScrollConfig} from 'ngx-page-scroll';\n\nexport class AppComponent {\n    constructor() {\n        PageScrollConfig.defaultScrollOffset = 50;\n        PageScrollConfig.defaultEasingLogic = {\n            ease: (t: number, b: number, c: number, d: number): number => {\n                // easeInOutExpo easing\n                if (t === 0) return b;\n                if (t === d) return b + c;\n                if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n                return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n            }\n        };\n    }\n}\n```\n\n## Directive API\n\nAdditional attributes may be set on an DOM element using the `pageScroll` directive for customization.\nThey take precedence over the default settings specified in `PageScrollConfig` class. Thereby it is \npossible to have all page scroll-animations last e.g. 2 seconds, but a specific one should be performed with a custom easing function and a duration \nof only 1 second.\n\n### PageScroll properties\n\n| Attribute                 | Type        | Default      | Description   |\n| ------------------------- | ----------- | ------------ |-------------- |\n| `pageScroll`              |             |              | Attribute adding scroll-animation behavior when the `click`-event happens on the element.\n| `pageScrollTarget`        | string      |              | Optional attribute to set the element that should be scrolled to. Takes precedence over the ´href´-value\n| `pageScrollHorizontal`    | boolean     | false        | Whether the scroll should happen in vertical direction (`false`, default) or horizontal (`true`).\n| `pageScrollOffset`        | number      | 0            | Pixels to offset from the top of the element when scrolling to (positive value = scrolling will stop given pixels atop the target element).\n| `pageScrollDuration`      | number      | 1250         | Duration in milliseconds the whole scroll-animation should last.\n| `pageScrollSpeed`         | number      | -            | Speed in Pixel/Second the animation should take. Only applied if no duration is set. \n| `pageScrollInterruptible` | boolean     | true         | Whether the scroll animation should stop if the user interferes with it (`true`) or not (`false`).\n| `pageScrollAdjustHash`    | boolean     | false        | Whether the [routes hash/fragment](https://angular.io/docs/ts/latest/guide/router.html#!#query-parameters) should be updated to reflect to section that has been scrolled to\n| `pageScrollEasing`        | EasingLogic | linearEasing | Easing method to be used while calculating the scroll position over time (default is linear easing).\n\n### PageScroll events\n\n| Event                 | Type    | Description   |\n| --------------------- | ------- | ------------- |\n| `pageScrollFinish`    | boolean | Fired when the scroll-animation stops. Emits a boolean value which indicates whether the scroll animation finished successfully and reached its target (`true`) or not (`false`). Possible reasons for false: target not found or interrupted due to another scroll animation starting or user interaction.\n\n### Example\n\nThe following example will check whether the route _Home_ is currently loaded. \nIf this is true, the scroll-animation will be performed with the default \nproperties. If a different route is loaded, a subscription for route changes \nwill be made and the scroll-animation will be performed as soon as the new \nroute is loaded.\n\n```html\n <a pageScroll [routerLink]=\"['Home']\" href=\"#myanchor\">Go there</a>\n```\n\nOverriding all possible properties. `doSmth()` and `myEasing` are \ndefined in the component\n\n```html\n <a pageScroll [pageScrollOffset]=\"0\" [pageScrollDuration]=\"2000\" [pageScrollEasing]=\"myEasing\" [pageScrollInterruptible]=\"false\" (pageScrollFinish)=\"doSmth($event)\" href=\"#theanchor\">Visit</a>\n```\n\n```typescript\n    myEasing: EasingLogic = {\n        ease: (t: number, b: number, c: number, d: number): number => {\n            // easeInOutExpo easing\n            if (t === 0) return b;\n            if (t === d) return b + c;\n            if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;\n            return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;\n        }\n    };\n\n    doSmth(reachedTarget: boolean): void {\n        if (reachedTarget) {\n            console.log('Yeah, we reached our destination');\n        } else {\n            console.log('Ohoh, something interrupted us');\n        }\n    }\n```\n\n## Example App\n\nThe [_demo_](demo) subfolder contains a project created with angular-cli\nthat has been adapted to showcase the functionality of ngx-page-scroll. Run the \ndemo app by checking out that repository and execute the \nfollowing command in the project root directory:\n\n ```\n npm run demo\n ```\n  \n This will perform the following steps:\n\n ```\n // Install the ngx-page-scroll project\n npm install\n // Change into the example website folder\n cd demo/\n // Uninstall the current ngx-page-scroll version\n npm uninstall ngx-page-scroll\n // Install the demo website's dependencies\n npm install\n // Run the server\n ng serve\n ```\n\n## TODO:\n\n* Test across more different browsers\n\n## License\n\n[MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Nolanus/ngx-page-scroll.git"
  },
  "scripts": {
    "bundle:clean": "rimraf bundles",
    "bundle:create": "npm run bundle:clean && npm run rollup && npm run rollup:min",
    "compile": "npm run lint:code && ngc -p tsconfig-build.json --pretty",
    "compile:tsc": "npm run lint && tsc -p tsconfig.json --noUnusedLocals --pretty",
    "demo": "npm install && npm run demo:clean && npm run demo:start",
    "demo:clean": "cd demo/ && npm uninstall ngx-page-scroll && npm install",
    "demo:start": "cd demo/ && npm start",
    "lint": "npm run lint:code && npm run lint:test",
    "lint:code": "tslint ./src/**/*.ts -t verbose --exclude ./src/**/*.d.ts",
    "lint:test": "tslint ./test/**/*.ts -t verbose --exclude ./test/**/*.d.ts",
    "prepublish": "npm run compile && npm run bundle:create",
    "pretest": "npm run compile:tsc",
    "rollup": "rollup -c rollup.conf.js",
    "rollup:min": "rollup -c rollup-uglify.conf.js",
    "test": "protractor protractor.conf.js",
    "webdriver:init": "webdriver-manager update"
  },
  "typings": "ngx-page-scroll.d.ts",
  "version": "4.0.2"
}
