{"version":3,"file":"ngx-scrollspy-src.umd.min.js","sources":["../../../node_modules/src/util/tryCatch.ts","../../../node_modules/src/Subscription.ts","../../../node_modules/src/util/pipe.ts","../../../node_modules/src/operators/bufferTime.ts","../../../node_modules/src/observable/PromiseObservable.ts","../../../node_modules/src/observable/IteratorObservable.ts","../../../node_modules/src/operators/debounceTime.ts","../../../node_modules/src/util/Set.ts","../../../node_modules/src/operators/sampleTime.ts","../../../node_modules/src/operators/throttleTime.ts","../../../node_modules/src/operators/windowTime.ts","~/ngx-scrollspy/src/src/core/service.ts","~/ngx-scrollspy/src/src/core/window.directive.ts","~/ngx-scrollspy/src/src/core/element.directive.ts","~/ngx-scrollspy/src/src/plugin/index.service.ts","~/ngx-scrollspy/src/src/module.ts","~/ngx-scrollspy/src/src/plugin/affix.directive.ts","~/ngx-scrollspy/src/src/plugin/affix.ts","~/ngx-scrollspy/src/src/plugin/index.directive.ts","~/ngx-scrollspy/src/src/plugin/index.component.ts","~/ngx-scrollspy/src/src/plugin/index.ts","../../../node_modules/src/util/errorObject.ts","../../../node_modules/src/util/isFunction.ts","../../../node_modules/src/util/isArray.ts","../../../node_modules/src/util/isObject.ts","../../../node_modules/src/util/UnsubscriptionError.ts","../../../node_modules/src/Observer.ts","../../../node_modules/src/util/root.ts","../../../node_modules/src/symbol/rxSubscriber.ts","../../../node_modules/src/Subscriber.ts","../../../node_modules/src/OuterSubscriber.ts","../../../node_modules/src/util/isArrayLike.ts","../../../node_modules/src/util/isPromise.ts","../../../node_modules/src/util/toSubscriber.ts","../../../node_modules/src/symbol/observable.ts","../../../node_modules/src/util/noop.ts","../../../node_modules/src/Observable.ts","../../../node_modules/src/symbol/iterator.ts","../../../node_modules/src/InnerSubscriber.ts","../../../node_modules/src/util/subscribeToResult.ts","../../../node_modules/src/operators/audit.ts","../../../node_modules/src/scheduler/Action.ts","../../../node_modules/src/scheduler/AsyncAction.ts","../../../node_modules/src/Scheduler.ts","../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../node_modules/src/scheduler/async.ts","../../../node_modules/src/util/isNumeric.ts","../../../node_modules/src/util/isScheduler.ts","../../../node_modules/src/util/isDate.ts","../../../node_modules/src/observable/TimerObservable.ts","../../../node_modules/src/operators/buffer.ts","../../../node_modules/src/operators/bufferCount.ts","../../../node_modules/src/operators/bufferToggle.ts","../../../node_modules/src/operators/bufferWhen.ts","../../../node_modules/src/operators/catchError.ts","../../../node_modules/src/observable/ScalarObservable.ts","../../../node_modules/src/observable/EmptyObservable.ts","../../../node_modules/src/observable/ArrayObservable.ts","../../../node_modules/src/operators/combineLatest.ts","../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../node_modules/src/Notification.ts","../../../node_modules/src/operators/observeOn.ts","../../../node_modules/src/observable/FromObservable.ts","../../../node_modules/src/operators/mergeMap.ts","../../../node_modules/src/operators/count.ts","../../../node_modules/src/operators/debounce.ts","../../../node_modules/src/operators/defaultIfEmpty.ts","../../../node_modules/src/operators/delay.ts","../../../node_modules/src/operators/delayWhen.ts","../../../node_modules/src/operators/dematerialize.ts","../../../node_modules/src/operators/distinct.ts","../../../node_modules/src/operators/distinctUntilChanged.ts","../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/src/operators/elementAt.ts","../../../node_modules/src/operators/every.ts","../../../node_modules/src/operators/exhaust.ts","../../../node_modules/src/operators/exhaustMap.ts","../../../node_modules/src/operators/expand.ts","../../../node_modules/src/operators/filter.ts","../../../node_modules/src/operators/finalize.ts","../../../node_modules/src/operators/find.ts","../../../node_modules/src/util/EmptyError.ts","../../../node_modules/src/operators/first.ts","../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../node_modules/src/SubjectSubscription.ts","../../../node_modules/src/Subject.ts","../../../node_modules/src/util/MapPolyfill.ts","../../../node_modules/src/util/Map.ts","../../../node_modules/src/util/FastMap.ts","../../../node_modules/src/operators/groupBy.ts","../../../node_modules/src/operators/ignoreElements.ts","../../../node_modules/src/operators/isEmpty.ts","../../../node_modules/src/operators/last.ts","../../../node_modules/src/operators/map.ts","../../../node_modules/src/operators/mapTo.ts","../../../node_modules/src/operators/materialize.ts","../../../node_modules/src/operators/scan.ts","../../../node_modules/src/operators/takeLast.ts","../../../node_modules/src/operators/mergeMapTo.ts","../../../node_modules/src/operators/mergeScan.ts","../../../node_modules/src/operators/refCount.ts","../../../node_modules/src/observable/ConnectableObservable.ts","../../../node_modules/src/operators/multicast.ts","../../../node_modules/src/operators/onErrorResumeNext.ts","../../../node_modules/src/operators/pairwise.ts","../../../node_modules/src/BehaviorSubject.ts","../../../node_modules/src/AsyncSubject.ts","../../../node_modules/src/scheduler/QueueAction.ts","../../../node_modules/src/scheduler/queue.ts","../../../node_modules/src/scheduler/QueueScheduler.ts","../../../node_modules/src/ReplaySubject.ts","../../../node_modules/src/observable/race.ts","../../../node_modules/src/operators/repeat.ts","../../../node_modules/src/operators/repeatWhen.ts","../../../node_modules/src/operators/retry.ts","../../../node_modules/src/operators/retryWhen.ts","../../../node_modules/src/operators/sample.ts","../../../node_modules/src/operators/sequenceEqual.ts","../../../node_modules/src/operators/single.ts","../../../node_modules/src/operators/skip.ts","../../../node_modules/src/operators/skipLast.ts","../../../node_modules/src/operators/skipUntil.ts","../../../node_modules/src/operators/skipWhile.ts","../../../node_modules/src/operators/switchMap.ts","../../../node_modules/src/operators/switchMapTo.ts","../../../node_modules/src/operators/take.ts","../../../node_modules/src/operators/takeUntil.ts","../../../node_modules/src/operators/takeWhile.ts","../../../node_modules/src/operators/tap.ts","../../../node_modules/src/operators/throttle.ts","../../../node_modules/src/operators/timeInterval.ts","../../../node_modules/src/util/TimeoutError.ts","../../../node_modules/src/operators/timeout.ts","../../../node_modules/src/operators/timeoutWith.ts","../../../node_modules/src/operators/window.ts","../../../node_modules/src/operators/windowCount.ts","../../../node_modules/src/operators/windowToggle.ts","../../../node_modules/src/operators/windowWhen.ts","../../../node_modules/src/operators/withLatestFrom.ts","../../../node_modules/src/operators/zip.ts","../../../node_modules/src/operators/index.ts","~/ngx-scrollspy/src/src/plugin/infinite.directive.ts","~/ngx-scrollspy/src/src/plugin/infinite.ts","~/ngx-scrollspy/src/src/plugin/parallax.directive.ts","~/ngx-scrollspy/src/src/plugin/parallax.ts"],"sourcesContent":["import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nexport class ScrollSpyService {\npublic changes$: EventEmitter<any> = new EventEmitter();\nprivate observables: any = {};\n/**\n * @param {?} key\n * @return {?}\n */\npublic getObservable(key: string): any {\n    return this.observables[key];\n  }\n/**\n * @param {?} key\n * @param {?} observable\n * @return {?}\n */\npublic setObservable(key: string, observable: ReplaySubject<any> | Observable<any>) {\n    this.observables[key] = observable;\n    this.observables = this.observables = Object.assign({}, this.observables);\n    this.changes$.next({ index: key, change: 'set' });\n  }\n/**\n * @param {?} key\n * @return {?}\n */\npublic deleteObservable(key: string) {\n    delete this.observables[key];\n    this.observables = Object.assign({}, this.observables);\n    this.changes$.next({ index: key, change: 'delete' });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyService_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyService.ctorParameters;\n/** @type {?} */\nScrollSpyService.prototype.changes$;\n/** @type {?} */\nScrollSpyService.prototype.observables;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Injectable, OnInit } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { ScrollSpyService } from './service';\nexport class ScrollSpyDirective implements OnInit {\nprivate scrollStream$: ReplaySubject<any> = new ReplaySubject(1);\n/**\n * @param {?} scrollSpy\n */\nconstructor(\nprivate scrollSpy: ScrollSpyService\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!!this.scrollSpy.getObservable('window')) {\n      console.warn('ScrollSpy: duplicate id \"window\". Instance will be skipped!');\n    } else {\n      this.scrollSpy.setObservable('window', this.scrollStream$);\n    }\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonScroll($event: any) {\n    this.scrollStream$.next($event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpy]',\n  host: {\n    '(window:scroll)': 'onScroll($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollSpyService, },\n];\n}\n\nfunction ScrollSpyDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyDirective.ctorParameters;\n/** @type {?} */\nScrollSpyDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, Injectable, Input, OnInit, OnDestroy } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { ScrollSpyService } from './service';\nexport class ScrollSpyElementDirective implements OnInit, OnDestroy {\npublic scrollSpyId: string;\nprivate scrollStream$: ReplaySubject<any> = new ReplaySubject(1);\n/**\n * @param {?} scrollSpy\n */\nconstructor(\nprivate scrollSpy: ScrollSpyService\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.scrollSpyId) {\n      return console.warn('ScrollSpy: Missing id.');\n    }\n\n    if (!!this.scrollSpy.getObservable(this.scrollSpyId)) {\n      console.warn('ScrollSpy: duplicate id \"' + this.scrollSpyId + '\". Instance will be skipped!');\n    } else {\n      this.scrollSpy.setObservable(this.scrollSpyId, this.scrollStream$);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollSpy.deleteObservable(this.scrollSpyId);\n  }\n/**\n * @param {?} $event\n * @return {?}\n */\nonScroll($event: any) {\n    this.scrollStream$.next($event);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyElement]',\n  host: {\n    '(scroll)': 'onScroll($event)'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollSpyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'scrollSpyId': [{ type: Input, args: ['scrollSpyElement', ] },],\n};\n}\n\nfunction ScrollSpyElementDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyElementDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyElementDirective.ctorParameters;\n/** @type {?} */\nScrollSpyElementDirective.propDecorators;\n/** @type {?} */\nScrollSpyElementDirective.prototype.scrollSpyId;\n/** @type {?} */\nScrollSpyElementDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyElementDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, EventEmitter } from '@angular/core';\nexport class ScrollSpyIndexService {\npublic changes$: EventEmitter<any> = new EventEmitter();\nprivate indexes: any = {};\n/**\n * @param {?} key\n * @return {?}\n */\npublic getIndex(key: string): any {\n    return this.indexes[key];\n  }\n/**\n * @param {?} key\n * @param {?} index\n * @return {?}\n */\npublic setIndex(key: string, index: any) {\n    this.indexes[key] = index;\n    this.indexes = this.indexes = Object.assign({}, this.indexes);\n    this.changes$.emit({ index: key, change: 'set' });\n  }\n/**\n * @param {?} key\n * @return {?}\n */\npublic deleteIndex(key: string) {\n    delete this.indexes[key];\n    this.indexes = Object.assign({}, this.indexes);\n    this.changes$.emit({ index: key, change: 'delete' });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyIndexService_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyIndexService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyIndexService.ctorParameters;\n/** @type {?} */\nScrollSpyIndexService.prototype.changes$;\n/** @type {?} */\nScrollSpyIndexService.prototype.indexes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { ScrollSpyService } from './core/service';\nimport { ScrollSpyDirective } from './core/window.directive';\nimport { ScrollSpyElementDirective } from './core/element.directive';\n\nimport { ScrollSpyIndexService } from './plugin/index.service';\nexport class ScrollSpyModule {\nconstructor() {}\n/**\n * @return {?}\n */\nstatic forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ScrollSpyModule,\n      providers: [\n        ScrollSpyService,\n        ScrollSpyIndexService\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ ScrollSpyDirective, ScrollSpyElementDirective ],\n  exports: [ ScrollSpyDirective, ScrollSpyElementDirective ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Injectable,\n  ElementRef,\n  Input,\n  AfterViewInit,\n  OnDestroy,\n  ChangeDetectorRef\n} from '@angular/core';\n\nimport { ScrollSpyService } from '../core/service';\n\nexport interface ScrollSpyAffixOptions {\n  topMargin?: number;\n  bottomMargin?: number;\n}\nexport class ScrollSpyAffixDirective implements AfterViewInit, OnDestroy {\npublic options: ScrollSpyAffixOptions;\npublic elementTop: number;\npublic elementBottom: number;\npublic affix: boolean = false;\npublic affixTop: boolean = false;\npublic affixBottom: boolean = false;\npublic defaultOptions: ScrollSpyAffixOptions = {\n    topMargin: 0,\n    bottomMargin: 0\n  };\npublic scrollStream$: any;\npublic el: HTMLElement;\npublic parentEl: any;\n/**\n * @param {?} ref\n * @param {?} elRef\n * @param {?} scrollSpy\n */\nconstructor(\nprivate ref: ChangeDetectorRef,\nprivate elRef: ElementRef,\nprivate scrollSpy: ScrollSpyService\n  ) {\n    this.el = elRef.nativeElement;\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    this.options = Object.assign(this.defaultOptions, this.options);\n\n    this.parentEl = this.el.parentElement;\n    this.elementTop = this.parentEl.scrollTop;\n    this.elementBottom = this.elementTop + this.parentEl.getBoundingClientRect().height;\n\n    if (!!this.scrollSpy.getObservable('window')) {\n      // TODO: Remove setTimeout once: https://github.com/angular/angular/issues/7443\n      this.scrollStream$ = this.scrollSpy.getObservable('window').subscribe((e: any) => {\n        if (typeof e.target.scrollingElement !== 'undefined') {\n          setTimeout(() => this.update(e.target.scrollingElement.scrollTop));\n        } else if (typeof e.target.scrollY !== 'undefined') {\n          setTimeout(() => this.update(e.target.scrollY));\n        } else if (typeof e.target.pageYOffset !== 'undefined') {\n          setTimeout(() => this.update(e.target.pageYOffset));\n        } else if(e.target.parentWindow && e.target.parentWindow.pageYOffset) {\n          setTimeout(() => this.update(e.target.parentWindow.pageYOffset));\n        }\n      });\n    }\n  }\n/**\n * @param {?} currentTop\n * @return {?}\n */\nupdate(currentTop: number) {\n    if (currentTop >= this.elementTop + this.options.topMargin) {\n      if (currentTop > this.elementBottom - this.options.bottomMargin - this.el.getBoundingClientRect().height) {\n        if (this.affixTop || !this.affixBottom) {\n          this.ref.markForCheck();\n        }\n        this.affixTop = false;\n        this.affixBottom = true;\n        this.affix = true;\n      } else {\n        if (!this.affixTop || this.affixBottom) {\n          this.ref.markForCheck();\n        }\n        this.affixTop = true;\n        this.affixBottom = false;\n        this.affix = true;\n      }\n    } else {\n      if (this.affixTop) {\n        this.ref.markForCheck();\n      }\n      this.affixTop = false;\n      this.affixBottom = false;\n      this.affix = false;\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollStream$.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyAffix]',\n  host: {\n    '[class.affix]': 'affix',\n    '[class.affix-top]': 'affixTop',\n    '[class.affix-bottom]': 'affixBottom'\n  }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: ScrollSpyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['scrollSpyAffix', ] },],\n};\n}\n\nfunction ScrollSpyAffixDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyAffixDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyAffixDirective.ctorParameters;\n/** @type {?} */\nScrollSpyAffixDirective.propDecorators;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.options;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.elementTop;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.elementBottom;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.affix;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.affixTop;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.affixBottom;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.el;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.parentEl;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.ref;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.elRef;\n/** @type {?} */\nScrollSpyAffixDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\n\nexport {ScrollSpyAffixOptions,ScrollSpyAffixDirective} from './affix.directive';\n\nimport { ScrollSpyAffixDirective } from './affix.directive';\nexport class ScrollSpyAffixModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ ScrollSpyAffixDirective ],\n  exports: [ ScrollSpyAffixDirective ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyAffixModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyAffixModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyAffixModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Injectable,\n  ElementRef,\n  Input,\n  OnInit,\n  AfterViewInit,\n  OnDestroy\n} from '@angular/core';\n\nimport { ScrollSpyIndexService } from './index.service';\n\nexport interface ScrollSpyIndexOptions {\n  id?: string;\n  selector?: string;\n}\nexport class ScrollSpyIndexDirective implements OnInit, AfterViewInit, OnDestroy {\npublic options: ScrollSpyIndexOptions;\npublic defaultOptions: ScrollSpyIndexOptions = {\n    selector: 'anchor'\n  };\npublic el: HTMLElement;\n/**\n * @param {?} elRef\n * @param {?} scrollSpyIndex\n */\nconstructor(\nprivate elRef: ElementRef,\nprivate scrollSpyIndex: ScrollSpyIndexService\n  ) {\n    this.el = elRef.nativeElement;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.id) {\n      return console.warn('ScrollSpyIndex: Missing id.');\n    }\n\n    this.options = Object.assign(this.defaultOptions, this.options);\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    this.scrollSpyIndex.setIndex(this.options.id, this.el.getElementsByClassName(this.options.selector));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollSpyIndex.deleteIndex(this.options.id);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyIndex]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ScrollSpyIndexService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['scrollSpyIndex', ] },],\n};\n}\n\nfunction ScrollSpyIndexDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyIndexDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyIndexDirective.ctorParameters;\n/** @type {?} */\nScrollSpyIndexDirective.propDecorators;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.options;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.el;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.elRef;\n/** @type {?} */\nScrollSpyIndexDirective.prototype.scrollSpyIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  ChangeDetectorRef,\n  Injectable,\n  Input,\n  ElementRef,\n  OnInit,\n  AfterViewInit,\n  OnDestroy,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { ScrollSpyService } from '../core/service';\nimport { ScrollSpyIndexService } from './index.service';\n\nexport interface ScrollSpyIndexComponentOptions {\n  id?: string;\n  spyId?: string;\n  topMargin?: number;\n}\nexport class ScrollSpyIndexRenderComponent implements OnInit, AfterViewInit, OnDestroy {\npublic scrollSpyIndexRenderOptions: ScrollSpyIndexComponentOptions;\npublic currentScrollPosition: number;\npublic items: any[] = [];\npublic itemsHash: any = {};\npublic itemsToHighlight: Array<string> = [];\npublic defaultOptions: ScrollSpyIndexComponentOptions = {\n    spyId: 'window',\n    topMargin: 0\n  };\npublic changeStream$: any;\npublic scrollStream$: any;\npublic el: HTMLElement;\n/**\n * @param {?} ref\n * @param {?} elRef\n * @param {?} scrollSpy\n * @param {?} scrollSpyIndex\n */\nconstructor(\nprivate ref: ChangeDetectorRef,\nprivate elRef: ElementRef,\nprivate scrollSpy: ScrollSpyService,\nprivate scrollSpyIndex: ScrollSpyIndexService\n  ) {\n    this.el = elRef.nativeElement;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.scrollSpyIndexRenderOptions) {\n      this.scrollSpyIndexRenderOptions = {};\n    }\n\n    if (!this.scrollSpyIndexRenderOptions.id) {\n      return console.warn('ScrollSpyIndex: Missing id.');\n    }\n\n    this.scrollSpyIndexRenderOptions = Object.assign(this.defaultOptions, this.scrollSpyIndexRenderOptions);\n\n    this.changeStream$ = this.scrollSpyIndex.changes$.subscribe((e: any) => {\n      if (e.index === this.scrollSpyIndexRenderOptions.id) {\n        if (e.change === 'delete') {\n          this.update();\n        } else if (e.change === 'set') {\n          this.update();\n        }\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!!this.scrollSpy.getObservable(this.scrollSpyIndexRenderOptions.spyId)) {\n      this.scrollStream$ = this.scrollSpy.getObservable(this.scrollSpyIndexRenderOptions.spyId).subscribe((e: any) => {\n        if (typeof e.target.scrollingElement !== 'undefined') {\n          this.currentScrollPosition = e.target.scrollingElement.scrollTop;\n        } else if (typeof e.target.scrollY !== 'undefined') {\n          this.currentScrollPosition = e.target.scrollY;\n        } else if (typeof e.target.pageYOffset !== 'undefined') {\n          this.currentScrollPosition = e.target.pageYOffset;\n        }\n        this.calculateHighlight();\n      });\n    } else {\n      return console.warn('ScrollSpyIndexComponent: No ScrollSpy observable for id \"' + this.scrollSpyIndexRenderOptions.spyId + '\"');\n    }\n  }\n/**\n * @return {?}\n */\nupdate() {\n    const /** @type {?} */ data: Array<any> = this.scrollSpyIndex.getIndex(this.scrollSpyIndexRenderOptions.id) || [];\n\n    let /** @type {?} */ stack: Array<any> = [];\n    let /** @type {?} */ parentStack: Array<any> = [];\n    let /** @type {?} */ lastItem: any;\n\n    this.items = [];\n    this.itemsHash = {};\n\n    for (var /** @type {?} */ i = 0; i < data.length; ++i) {\n      // parse basic info from the dom item\n      var /** @type {?} */ item: any = {\n        link: data[i].id,\n        text: data[i].textContent || data[i].innerText,\n        parents: [],\n        children: []\n      };\n\n      // build type identifier\n      var /** @type {?} */ level: string = data[i].tagName;\n      for (var /** @type {?} */ n = 0; n < data[i].classList.length; n++) {\n        level += ',' + data[i].classList[n];\n      }\n\n      // here be dragons\n      var /** @type {?} */ stacksize: number = stack.length;\n      if (stacksize === 0) {\n        // we are at the top level and will stay there\n        stack.push(level);\n      } else if (level !== stack[stacksize - 1]) {\n        // traverse the ancestry, looking for a match\n        for (var /** @type {?} */ j = stacksize - 1; j >= 0; j--) {\n          if (level === stack[j]) {\n            break; // found an ancestor\n          }\n        }\n        if (j < 0) {\n          // this is a new submenu item, lets push the stack\n          stack.push(level);\n          parentStack.push(lastItem);\n        } else {\n          // we are either a sibling or higher up the tree,\n          // lets pop the stack if needed\n          while (stack.length > j + 1) {\n            stack.pop();\n            parentStack.pop();\n          }\n        }\n      }\n\n      // for next iteration\n      lastItem = item.link;\n\n      // if we have a parent, lets record it\n      if (parentStack.length > 0) {\n        item.parents = [...parentStack];\n\n        let /** @type {?} */ temp: any = this.items;\n        for (var /** @type {?} */ t = 0; t < parentStack.length; ++t) {\n          if (t < parentStack.length - 1) {\n            temp = temp.filter((e: any) => { return e.link === parentStack[t]; })[0].children;\n          } else {\n            temp.filter((e: any) => { return e.link === parentStack[t]; })[0].children.push(item);\n          }\n        }\n      } else {\n        this.items.push(item);\n      }\n\n      this.itemsHash[item.link] = item;\n    }\n\n    setTimeout(() => {\n      this.calculateHighlight();\n    });\n  }\n/**\n * @return {?}\n */\ncalculateHighlight() {\n    var /** @type {?} */ items: Array<any> = this.scrollSpyIndex.getIndex(this.scrollSpyIndexRenderOptions.id);\n    this.itemsToHighlight = [];\n\n    if (!items || !items.length) {\n      return;\n    }\n\n    var /** @type {?} */ highlightItem: string;\n    for (var /** @type {?} */ i = items.length - 1; i >= 0; i--) {\n      if (this.currentScrollPosition - (items[i].offsetTop + this.scrollSpyIndexRenderOptions.topMargin) >= 0) {\n        highlightItem = items[i].id;\n        break;\n      }\n    }\n\n    if (!highlightItem) {\n      highlightItem = items[0].id;\n    }\n    this.itemsToHighlight = [highlightItem, ...this.itemsHash[highlightItem].parents];\n\n    this.ref.markForCheck();\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nhighlight(id: string): boolean {\n    return this.itemsToHighlight.indexOf(id) !== -1;\n  }\n/**\n * @param {?} anchor\n * @return {?}\n */\ngoTo(anchor: string) {\n    setTimeout(() => {\n      document.querySelector('#' + anchor).scrollIntoView();\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.changeStream$.unsubscribe();\n    this.scrollStream$.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Component, args: [{\n  selector: 'scrollSpy-index-render',\n  template: `\n  <div #container>\n    <ul class=\"nav flex-column menu\">\n      <li *ngFor=\"let item of items\" [class.active]=\"highlight(item.link)\">\n        <a [routerLink]=\"\" fragment=\"{{item.link}}\" (click)=\"goTo(item.link)\">{{item.text}}</a>\n        <ul *ngIf=\"item.children.length\" class=\"nav menu\">\n          <li *ngFor=\"let itemChild of item.children\" [class.active]=\"highlight(itemChild.link)\">\n            <a [routerLink]=\"\" fragment=\"{{itemChild.link}}\" (click)=\"goTo(itemChild.link)\">{{itemChild.text}}</a>\n            <ul *ngIf=\"itemChild.children.length\" class=\"nav menu\">\n              <li *ngFor=\"let itemChild1 of itemChild.children\" [class.active]=\"highlight(itemChild1.link)\">\n                <a [routerLink]=\"\" fragment=\"{{itemChild1.link}}\" (click)=\"goTo(itemChild1.link)\">{{itemChild1.text}}</a>\n                 <ul *ngIf=\"itemChild1.children.length\" class=\"nav menu\">\n                  <li *ngFor=\"let itemChild2 of itemChild1.children\" [class.active]=\"highlight(itemChild2.link)\">\n                    <a [routerLink]=\"\" fragment=\"{{itemChild2.link}}\" (click)=\"goTo(itemChild2.link)\">{{itemChild2.text}}</a>\n                  </li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n{type: ScrollSpyService, },\n{type: ScrollSpyIndexService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'scrollSpyIndexRenderOptions': [{ type: Input },],\n};\n}\n\nfunction ScrollSpyIndexRenderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyIndexRenderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyIndexRenderComponent.ctorParameters;\n/** @type {?} */\nScrollSpyIndexRenderComponent.propDecorators;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.scrollSpyIndexRenderOptions;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.currentScrollPosition;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.items;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.itemsHash;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.itemsToHighlight;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.changeStream$;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.el;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.ref;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.elRef;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.scrollSpy;\n/** @type {?} */\nScrollSpyIndexRenderComponent.prototype.scrollSpyIndex;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\n\nexport {ScrollSpyIndexService} from './index.service';\nexport {ScrollSpyIndexOptions,ScrollSpyIndexDirective} from './index.directive';\nexport {ScrollSpyIndexComponentOptions,ScrollSpyIndexRenderComponent} from './index.component';\n\nimport { ScrollSpyIndexDirective } from './index.directive';\nimport { ScrollSpyIndexRenderComponent } from './index.component';\nexport class ScrollSpyIndexModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [ CommonModule, RouterModule ],\n  declarations: [ ScrollSpyIndexDirective, ScrollSpyIndexRenderComponent ],\n  exports: [ ScrollSpyIndexDirective, ScrollSpyIndexRenderComponent ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyIndexModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyIndexModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyIndexModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export { audit } from './audit';\nexport { auditTime } from './auditTime';\nexport { buffer } from './buffer';\nexport { bufferCount } from './bufferCount';\nexport { bufferTime } from './bufferTime';\nexport { bufferToggle } from './bufferToggle';\nexport { bufferWhen } from './bufferWhen';\nexport { catchError } from './catchError';\nexport { combineAll } from './combineAll';\nexport { combineLatest } from './combineLatest';\nexport { concat } from './concat';\nexport { concatAll } from './concatAll';\nexport { concatMap } from './concatMap';\nexport { concatMapTo } from './concatMapTo';\nexport { count } from './count';\nexport { debounce } from './debounce';\nexport { debounceTime } from './debounceTime';\nexport { defaultIfEmpty } from './defaultIfEmpty';\nexport { delay } from './delay';\nexport { delayWhen } from './delayWhen';\nexport { dematerialize } from './dematerialize';\nexport { distinct } from './distinct';\nexport { distinctUntilChanged } from './distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './distinctUntilKeyChanged';\nexport { elementAt } from './elementAt';\nexport { every } from './every';\nexport { exhaust } from './exhaust';\nexport { exhaustMap } from './exhaustMap';\nexport { expand } from './expand';\nexport { filter } from './filter';\nexport { finalize } from './finalize';\nexport { find } from './find';\nexport { findIndex } from './findIndex';\nexport { first } from './first';\nexport { groupBy } from './groupBy';\nexport { ignoreElements } from './ignoreElements';\nexport { isEmpty } from './isEmpty';\nexport { last } from './last';\nexport { map } from './map';\nexport { mapTo } from './mapTo';\nexport { materialize } from './materialize';\nexport { max } from './max';\nexport { merge } from './merge';\nexport { mergeAll } from './mergeAll';\nexport { mergeMap } from './mergeMap';\nexport { mergeMap as flatMap } from './mergeMap';\nexport { mergeMapTo } from './mergeMapTo';\nexport { mergeScan } from './mergeScan';\nexport { min } from './min';\nexport { multicast } from './multicast';\nexport { observeOn } from './observeOn';\nexport { onErrorResumeNext } from './onErrorResumeNext';\nexport { pairwise } from './pairwise';\nexport { partition } from './partition';\nexport { pluck } from './pluck';\nexport { publish } from './publish';\nexport { publishBehavior } from './publishBehavior';\nexport { publishLast } from './publishLast';\nexport { publishReplay } from './publishReplay';\nexport { race } from './race';\nexport { reduce } from './reduce';\nexport { repeat } from './repeat';\nexport { repeatWhen } from './repeatWhen';\nexport { retry } from './retry';\nexport { retryWhen } from './retryWhen';\nexport { refCount } from './refCount';\nexport { sample } from './sample';\nexport { sampleTime } from './sampleTime';\nexport { scan } from './scan';\nexport { sequenceEqual } from './sequenceEqual';\nexport { share } from './share';\nexport { shareReplay } from './shareReplay';\nexport { single } from './single';\nexport { skip } from './skip';\nexport { skipLast } from './skipLast';\nexport { skipUntil } from './skipUntil';\nexport { skipWhile } from './skipWhile';\nexport { startWith } from './startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './subscribeOn';\nexport { switchAll } from './switchAll';\nexport { switchMap } from './switchMap';\nexport { switchMapTo } from './switchMapTo';\nexport { take } from './take';\nexport { takeLast } from './takeLast';\nexport { takeUntil } from './takeUntil';\nexport { takeWhile } from './takeWhile';\nexport { tap } from './tap';\nexport { throttle } from './throttle';\nexport { throttleTime } from './throttleTime';\nexport { timeInterval } from './timeInterval';\nexport { timeout } from './timeout';\nexport { timeoutWith } from './timeoutWith';\nexport { timestamp } from './timestamp';\nexport { toArray } from './toArray';\nexport { window } from './window';\nexport { windowCount } from './windowCount';\nexport { windowTime } from './windowTime';\nexport { windowToggle } from './windowToggle';\nexport { windowWhen } from './windowWhen';\nexport { withLatestFrom } from './withLatestFrom';\nexport { zip } from './zip';\nexport { zipAll } from './zipAll';\n","import {\n  Directive,\n  Injectable,\n  Input,\n  Output,\n  EventEmitter,\n  OnInit,\n  AfterViewInit,\n  OnDestroy\n} from '@angular/core';\nimport { throttleTime } from 'rxjs/operators';\n\nimport { ScrollSpyService } from '../core/service';\n\nexport interface ScrollSpyInfiniteOptions {\n  spyId?: string;\n  distanceRatio?: number;\n}\nexport class ScrollSpyInfiniteDirective implements OnInit, AfterViewInit, OnDestroy {\npublic options: ScrollSpyInfiniteOptions;\npublic scrollSpyInfiniteDisabled: boolean;\npublic scrollSpyInfiniteEvent: EventEmitter<any> = new EventEmitter();\npublic defaultOptions: ScrollSpyInfiniteOptions = {\n    spyId: 'window',\n    distanceRatio: 1\n  };\npublic scrollStream$: any;\n/**\n * @param {?} scrollSpy\n */\nconstructor(\nprivate scrollSpy: ScrollSpyService\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    this.options = Object.assign(this.defaultOptions, this.options);\n\n    if (this.scrollSpyInfiniteDisabled === undefined) {\n      this.scrollSpyInfiniteDisabled = false;\n    }\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!!this.scrollSpy.getObservable(this.options.spyId)) {\n      this.scrollStream$ = this.scrollSpy.getObservable(this.options.spyId).pipe(throttleTime(200)).subscribe((e: any) => {\n        if (!this.scrollSpyInfiniteDisabled) {\n          this.evaluateScroll(e.target);\n        }\n      });\n    } else {\n      return console.warn('ScrollSpyInfinite: No ScrollSpy observable for id \"' + this.options.spyId + '\"');\n    }\n  }\n/**\n * @param {?} target\n * @return {?}\n */\nevaluateScroll(target: any) {\n    if (this.options.spyId === 'window') {\n      const /** @type {?} */ scrollHeight = target.document.documentElement.scrollHeight;\n      const /** @type {?} */ scrollTop = target.pageYOffset || target.parentWindow.pageYOffset;\n      const /** @type {?} */ offsetHeight = target.document.documentElement.clientHeight;\n\n      if (scrollHeight - scrollTop - offsetHeight <= offsetHeight * this.options.distanceRatio) {\n        this.scrollSpyInfiniteEvent.next({});\n      }\n    } else {\n      const /** @type {?} */ scrollHeight = target.scrollingElement ?\n        target.scrollingElement.scrollHeight\n        : target.scrollHeight;\n\n      const /** @type {?} */ scrollTop = target.scrollingElement ?\n        target.scrollingElement.scrollTop\n        : target.scrollTop;\n\n      const /** @type {?} */ offsetHeight = target.scrollingElement ?\n        target.scrollingElement.offsetHeight\n        : target.offsetHeight;\n\n      if (scrollHeight - scrollTop - offsetHeight <= offsetHeight * this.options.distanceRatio) {\n        this.scrollSpyInfiniteEvent.next({});\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollStream$.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyInfinite]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ScrollSpyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['scrollSpyInfinite', ] },],\n'scrollSpyInfiniteDisabled': [{ type: Input },],\n'scrollSpyInfiniteEvent': [{ type: Output },],\n};\n}\n\nfunction ScrollSpyInfiniteDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyInfiniteDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyInfiniteDirective.ctorParameters;\n/** @type {?} */\nScrollSpyInfiniteDirective.propDecorators;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.options;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.scrollSpyInfiniteDisabled;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.scrollSpyInfiniteEvent;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyInfiniteDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\n\nexport {ScrollSpyInfiniteOptions,ScrollSpyInfiniteDirective} from './infinite.directive';\n\nimport { ScrollSpyInfiniteDirective } from './infinite.directive';\nexport class  ScrollSpyInfiniteModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ ScrollSpyInfiniteDirective ],\n  exports: [ ScrollSpyInfiniteDirective ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyInfiniteModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyInfiniteModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyInfiniteModule.ctorParameters;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Directive,\n  Injectable,\n  Input,\n  ElementRef,\n  Renderer2,\n  OnInit,\n  AfterViewInit,\n  OnDestroy\n} from '@angular/core';\n\nimport { ScrollSpyService } from '../core/service';\n\nexport interface ScrollSpyParallaxOptions {\n  // (default: 'window')\n  spyId?: string;\n\n  // (default: false)\n  horizontal?: boolean;\n\n  // the css property (converted to camelCase) that you want changed along with the\n  // value you want to assign to the css key; you should use ParallaxCss if you're\n  // just defining one property without special values\n  cssKey?: string;\n\n  // this is used to define the css property you'd like to modify as you scroll\n  // default is backgroundPositionY\n  property?: string;\n\n  // ratio defining how fast, slow, or the direction of the changes on scrolling\n  ratio?: number;\n\n  // this is the initial value in pixels for the parallaxCss property you defined\n  // before or, if you didn't define one, it defaults to 0\n  initValue?: number;\n\n  // the upper constraint for the css transformation\n  max?: number;\n\n  // the lower constraint for the css transformation\n  min?: number;\n\n  // the unit (e.g. 'px', 'em', '%', 'vh', etc.)\n  unit?: string;\n\n  axis?: string;\n}\nexport class ScrollSpyParallaxDirective implements OnInit, AfterViewInit, OnDestroy {\npublic options: ScrollSpyParallaxOptions;\npublic scrollSpyParallaxDisabled: boolean;\npublic cssValue: string;\npublic isSpecialVal: boolean = false;\npublic defaultOptions: ScrollSpyParallaxOptions = {\n    spyId: 'window',\n    horizontal: false,\n    cssKey: 'backgroundPosition',\n    property: 'backgroundPositionY',\n    ratio: -.7,\n    initValue: 0,\n    unit: 'px',\n    axis: 'Y'\n  };\npublic scrollStream$: any;\npublic el: HTMLElement;\n/**\n * @param {?} renderer\n * @param {?} elRef\n * @param {?} scrollSpy\n */\nconstructor(\nprivate renderer: Renderer2,\nprivate elRef: ElementRef,\nprivate scrollSpy: ScrollSpyService\n  ) {\n    this.el = elRef.nativeElement;\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    this.options = Object.assign(this.defaultOptions, this.options);\n\n    if (this.scrollSpyParallaxDisabled === undefined) {\n      this.scrollSpyParallaxDisabled = false;\n    }\n\n    if (this.options.property.match(/backgroundPosition/i)) {\n      if (this.options.property.split('backgroundPosition')[1].toUpperCase() === 'X') {\n        this.options.axis = 'X';\n      }\n\n      this.options.property = 'backgroundPosition';\n    }\n\n    let /** @type {?} */ cssValArray: Array<string>;\n\n    cssValArray = this.options.property.split(':');\n    this.options.cssKey = cssValArray[0];\n    this.cssValue = cssValArray[1];\n\n    this.isSpecialVal = this.cssValue ? true : false;\n\n    if (!this.cssValue) {\n      this.cssValue = this.options.cssKey;\n    }\n\n    this.options.ratio = +this.options.ratio;\n    this.options.initValue = +this.options.initValue;\n\n  }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    if (!!this.scrollSpy.getObservable(this.options.spyId)) {\n      this.scrollStream$ = this.scrollSpy.getObservable(this.options.spyId).subscribe((e: any) => {\n        if (!this.scrollSpyParallaxDisabled) {\n          this.evaluateScroll(e.target);\n        }\n      });\n    } else {\n      return console.warn('ScrollSpyParallax: No ScrollSpy observable for id \"' + this.options.spyId + '\"');\n    }\n  }\n/**\n * @param {?} target\n * @return {?}\n */\nevaluateScroll(target: any) {\n    let /** @type {?} */ currentScrollPosition: number;\n    if (typeof target.scrollTop !== 'undefined') {\n      currentScrollPosition = target.scrollTop;\n    } else if (typeof target.scrollingElement !== 'undefined') {\n      currentScrollPosition = target.scrollingElement.scrollTop;\n    } else if (typeof target.scrollY !== 'undefined') {\n      currentScrollPosition = target.scrollY;\n    } else if (typeof target.pageYOffset !== 'undefined') {\n      currentScrollPosition = target.pageYOffset;\n    } else if (target.parentWindow && target.parentWindow.pageYOffset) {\n      currentScrollPosition = target.parentWindow.pageYOffset;\n    }\n\n    let /** @type {?} */ result: string;\n    let /** @type {?} */ value: number;\n\n    value = currentScrollPosition * this.options.ratio + this.options.initValue;\n\n    if (this.options.max !== undefined && currentScrollPosition >= this.options.max) {\n      currentScrollPosition = this.options.max;\n    } else if (this.options.min !== undefined && currentScrollPosition <= this.options.min) {\n      currentScrollPosition = this.options.min;\n    }\n\n    // added after realizing original setup wasn't compatible in Firefox debugger;\n    if (this.options.cssKey === 'backgroundPosition') {\n      if (this.options.axis === 'X') {\n        result = value + this.options.unit + ' 0';\n      } else {\n        result = '0 ' + value + this.options.unit;\n      }\n    } else if (this.isSpecialVal) {\n      result = this.cssValue + '(' + value + this.options.unit + ')';\n    } else {\n      result = value + this.options.unit;\n    }\n\n    this.renderer.setStyle(this.el, this.options.cssKey, result);\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.scrollStream$.unsubscribe();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n{ type: Directive, args: [{\n  selector: '[scrollSpyParallax]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: ScrollSpyService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'options': [{ type: Input, args: ['scrollSpyParallax', ] },],\n'scrollSpyParallaxDisabled': [{ type: Input },],\n};\n}\n\nfunction ScrollSpyParallaxDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyParallaxDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyParallaxDirective.ctorParameters;\n/** @type {?} */\nScrollSpyParallaxDirective.propDecorators;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.options;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.scrollSpyParallaxDisabled;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.cssValue;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.isSpecialVal;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.defaultOptions;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.scrollStream$;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.el;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.renderer;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.elRef;\n/** @type {?} */\nScrollSpyParallaxDirective.prototype.scrollSpy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\n\nexport {ScrollSpyParallaxOptions,ScrollSpyParallaxDirective} from './parallax.directive';\n\nimport { ScrollSpyParallaxDirective } from './parallax.directive';\nexport class  ScrollSpyParallaxModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [ ScrollSpyParallaxDirective ],\n  exports: [ ScrollSpyParallaxDirective ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScrollSpyParallaxModule_tsickle_Closure_declarations() {\n/** @type {?} */\nScrollSpyParallaxModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScrollSpyParallaxModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["tryCatcher","tryCatchTarget","apply","this","arguments","e","errorObject_1","errorObject","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError_1","UnsubscriptionError","pipeFromArray","fns","length","input","prev","fn","noop_1","noop","dispatchBufferTimeSpanOnly","state","subscriber","prevContext","context","closeContext","closed","openContext","closeAction","schedule","bufferTimeSpan","dispatchBufferCreation","bufferCreationInterval","scheduler","action","add","dispatchBufferClose","arg","dispatchNext","value","next","complete","dispatchError","error","getIterator","obj","i","iterator_1","iterator","StringIterator","undefined","ArrayIterator","TypeError","toLength","o","len","isNaN","numberIsFinite","sign","Math","floor","abs","maxSafeInteger","root_1","root","isFinite","valueAsNumber","dispatchNext$1","debouncedNext","minimalSetImpl","MinimalSet","_values","prototype","has","push","indexOf","Object","defineProperty","get","clear","dispatchNotification","period","notifyNext","dispatchNext$2","clearThrottle","dispatchWindowTimeSpanOnly","windowTimeSpan","window","closeWindow","openWindow","dispatchWindowCreation","windowCreationInterval","subscription","timeSpanState","dispatchWindowClose","remove","ScrollSpyService","changes$","EventEmitter","observables","getObservable","key","setObservable","observable","assign","index","change","deleteObservable","decorators","type","Injectable","ctorParameters","ScrollSpyDirective","scrollSpy","scrollStream$","ReplaySubject","ngOnInit","console","warn","onScroll","$event","Directive","args","selector","host","(window:scroll)","ScrollSpyElementDirective","scrollSpyId","ngOnDestroy","(scroll)","propDecorators","Input","ScrollSpyIndexService","indexes","getIndex","setIndex","emit","deleteIndex","ScrollSpyModule","forRoot","ngModule","providers","NgModule","declarations","exports","ScrollSpyAffixDirective","ref","elRef","affix","affixTop","affixBottom","defaultOptions","topMargin","bottomMargin","el","nativeElement","ngAfterViewInit","_this","options","parentEl","parentElement","elementTop","scrollTop","elementBottom","getBoundingClientRect","height","subscribe","target","scrollingElement","setTimeout","update","scrollY","pageYOffset","parentWindow","currentTop","markForCheck","unsubscribe","[class.affix]","[class.affix-top]","[class.affix-bottom]","ChangeDetectorRef","ElementRef","ScrollSpyAffixModule","ScrollSpyIndexDirective","scrollSpyIndex","id","getElementsByClassName","ScrollSpyIndexRenderComponent","items","itemsHash","itemsToHighlight","spyId","scrollSpyIndexRenderOptions","changeStream$","currentScrollPosition","calculateHighlight","lastItem","data","stack","parentStack","item","link","text","textContent","innerText","parents","children","level","tagName","n","classList","stacksize","j","pop","slice","temp","t","filter","highlightItem","offsetTop","highlight","goTo","anchor","document","querySelector","scrollIntoView","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","ScrollSpyIndexModule","imports","CommonModule","RouterModule","x","Array","isArray","_super","call","Error","map","toString","join","name","message","__extends","Subscription","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","_a","isFunction_1","isFunction","trial","tryCatch_1","tryCatch","isArray_1","sub","isObject_1","isObject","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","splice","parent","empty","__window","__self","self","WorkerGlobalScope","_root","global","Symbol","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","create","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","OuterSubscriber","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","Subscriber_1","then","nextOrObserver","getSymbolObservable","$$observable","_i","Observable","_isScalar","_subscribe","lift","operator","source","sink","toSubscriber_1","toSubscriber","_trySubscribe","forEach","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","symbolIteratorPonyfill","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","$$iterator","InnerSubscriber","outerSubscriber","result","InnerSubscriber_1","Observable_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","done","obs","msg","AuditSubscriber","AuditOperator","durationSelector","hasValue","throttled","duration","innerSubscription","subscribeToResult_1","subscribeToResult","OuterSubscriber_1","Action","work","delay","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","Date","AsyncScheduler","active","scheduled","shift","Scheduler_1","AsyncScheduler_1","AsyncAction_1","val","parseFloat","TimerObservable","dueTime","isNumeric_1","isNumeric","Number","isScheduler_1","isScheduler","async_1","async","isDate_1","isDate","initialDelay","dispatch","BufferSubscriber","BufferOperator","closingNotifier","buffer","BufferCountSubscriber","BufferCountOperator","bufferSize","startBufferEvery","subscriberClass","BufferSkipCountSubscriber","buffers","count","Context","BufferTimeOperator","maxBufferSize","BufferTimeSubscriber","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","BufferToggleSubscriber","BufferToggleOperator","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","BufferWhenOperator","subscribing","closingSubscription","CatchSubscriber","CatchOperator","caught","err2","ScalarObservable","EmptyObservable","ArrayObservable","array","of","ScalarObservable_1","EmptyObservable_1","none","CombineLatestSubscriber","CombineLatestOperator","project","values","toRespond","unused","oldVal","_tryProject","PromiseObservable","promise","IteratorObservable_2","IteratorObservable","hasError","return","str","idx","charAt","arr","pow","ArrayLikeObservable","arrayLike","Notification","kind","observe","observer","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","ArrayObservable_1","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","MergeMapSubscriber","MergeMapOperator","resultSelector","concurrent","POSITIVE_INFINITY","hasCompleted","_tryNext","_innerSub","_notifyResultSelector","CountSubscriber","CountOperator","predicate","_tryPredicate","DebounceSubscriber","DebounceOperator","durationSubscription","emitValue","DebounceTimeSubscriber","DebounceTimeOperator","debouncedSubscription","lastValue","clearDebounce","DefaultIfEmptySubscriber","DefaultIfEmptyOperator","defaultValue","isEmpty","DelaySubscriber","DelayOperator","queue","time","delay_1","max","_schedule","scheduleNotification","DelayMessage","DelayWhenSubscriber","DelayWhenOperator","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","SubscriptionDelayObservable","subscriptionDelay","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","DeMaterializeOperator","DistinctSubscriber","DistinctOperator","keySelector","flushes","_useKeySelector","_finalizeNext","DistinctUntilChangedSubscriber","DistinctUntilChangedOperator","compare","hasKey","y","Boolean","ArgumentOutOfRangeError","ElementAtSubscriber","ElementAtOperator","ArgumentOutOfRangeError_1","EverySubscriber","EveryOperator","thisArg","everyValueMatch","SwitchFirstSubscriber","SwitchFirstOperator","hasSubscription","SwitchFirstMapSubscriber","SwitchFirstMapOperator","tryNext","trySelectResult","ExpandSubscriber","ExpandOperator","subscribeToProjection","FilterSubscriber","FilterOperator","FinallySubscriber","FinallyOperator","callback","FindValueSubscriber","FindValueOperator","yieldIndex","EmptyError","FirstSubscriber","FirstOperator","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","SubjectSubscription_1","asObservable","Subject_2","MapPolyfill","size","_keys","set","delete","cb","MapPolyfill_1","FastMap","hasOwnProperty","GroupBySubscriber","GroupByOperator","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","FastMap_1","element","group","Subject_1","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","IgnoreElementsOperator","IsEmptySubscriber","IsEmptyOperator","LastSubscriber","LastOperator","MapSubscriber","MapOperator","MapToSubscriber","MapToOperator","MaterializeSubscriber","MaterializeOperator","ScanSubscriber","ScanOperator","accumulator","seed","hasSeed","_seed","TakeLastSubscriber","TakeLastOperator","total","ring","MergeMapToSubscriber","MergeMapToOperator","MergeScanSubscriber","MergeScanOperator","acc","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableSubscriber","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","refCount_1","MulticastOperator","OnErrorResumeNextSubscriber","OnErrorResumeNextOperator","nextSources","subscribeToNextSource","PairwiseSubscriber","PairwiseOperator","hasPrev","BehaviorSubject","_value","getValue","AsyncSubject","hasNext","QueueAction","QueueScheduler","QueueAction_1","ReplayEvent","ReplaySubject$$1","windowTime","_events","_bufferSize","_windowTime","_getNow","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","RaceSubscriber","RaceOperator","hasFirst","RepeatSubscriber","RepeatOperator","RepeatWhenSubscriber","RepeatWhenOperator","notifier","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetrySubscriber","RetryOperator","RetryWhenSubscriber","RetryWhenOperator","SampleSubscriber","SampleOperator","sampleSubscriber","SampleTimeSubscriber","SampleTimeOperator","SequenceEqualSubscriber","SequenceEqualOperator","compareTo","comparor","_b","_oneComplete","SequenceEqualCompareToSubscriber","checkValues","_c","a","b","areEqual","nextB","SingleSubscriber","SingleOperator","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipOperator","SkipLastSubscriber","SkipLastOperator","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","SkipUntilOperator","isInnerStopped","SkipWhileSubscriber","SkipWhileOperator","skipping","tryCallPredicate","SwitchMapSubscriber","SwitchMapOperator","_tryNotifyNext","SwitchMapToSubscriber","SwitchMapToOperator","inner","tryResultSelector","TakeSubscriber","TakeOperator","TakeUntilSubscriber","TakeUntilOperator","TakeWhileSubscriber","TakeWhileOperator","nextOrComplete","predicateResult","DoSubscriber","DoOperator","safeSubscriber","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeOperator","ThrottleTimeSubscriber","throttle_1","TimeInterval","interval","TimeIntervalSubscriber","TimeIntervalOperator","lastTime","span","TimeoutError","TimeoutSubscriber","TimeoutOperator","waitFor","absoluteTimeout","errorInstance","scheduleTimeout","dispatchTimeout","TimeoutWithSubscriber","TimeoutWithOperator","withObservable","WindowSubscriber","WindowOperator","windowBoundaries","windowSubscriber","sourceSubscription","prevWindow","newWindow","WindowCountSubscriber","WindowCountOperator","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","WindowTimeOperator","maxWindowSize","WindowTimeSubscriber","_numberOfNextedValues","numberOfNextedValues","window_2","WindowToggleSubscriber","WindowToggleOperator","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","WithLatestFromOperator","found","ZipSubscriber","ZipOperator","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","throttleTime","throttleTime_1","ScrollSpyInfiniteDirective","scrollSpyInfiniteEvent","distanceRatio","scrollSpyInfiniteDisabled","evaluateScroll","scrollHeight","documentElement","offsetHeight","clientHeight","Output","ScrollSpyInfiniteModule","ScrollSpyParallaxDirective","renderer","isSpecialVal","horizontal","cssKey","property","ratio","initValue","unit","axis","scrollSpyParallaxDisabled","match","split","toUpperCase","cssValArray","cssValue","min","setStyle","Renderer2","ScrollSpyParallaxModule"],"mappings":"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"}
