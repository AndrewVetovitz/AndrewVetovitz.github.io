{
  "version": 3,
  "file": "angular-inviewport.js",
  "sources": [
    "~/@thisissoon/angular-inviewport/angular-inviewport.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/in-viewport.module.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/in-viewport.directive.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/shared/event-data.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/window/window.service.ts"
  ],
  "sourcesContent": [
    "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n",
    "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { WindowRef } from './window/window.service';\n\nimport { InViewportDirective } from './in-viewport.directive';\n\nconst defaultProviders: Provider[] = [\n  WindowRef\n];\n\n/**\n * A simple lightweight library for Angular 2/4+ with other dependencies\n * that detects when an element is within the browser viewport and adds a\n * sn-viewport-in or sn-viewport-out class to the element.\n *\n * @export\n * @class InViewportModule\n */\n@NgModule({\n  declarations: [InViewportDirective],\n  exports: [InViewportDirective]\n})\nexport class InViewportModule {\n  /**\n   * Specify a static method for root module to ensure providers are only provided once\n   * but allows the module to still be imported into other modules without reproviding\n   * services.\n   *\n   * @static\n   * @returns {ModuleWithProviders}\n   * @memberof InViewportModule\n   */\n  public static forRoot(providers: Provider[] = defaultProviders): ModuleWithProviders {\n    return {\n      ngModule: InViewportModule,\n      providers: providers\n    };\n  }\n}\n",
    "import {\n  Directive, ElementRef, HostBinding, EventEmitter,\n  Input, Output, OnDestroy, AfterViewInit,\n  ChangeDetectorRef, NgZone\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport 'rxjs/add/operator/auditTime';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/takeUntil';\nimport 'rxjs/add/observable/merge';\n\nimport { WindowRef } from './window/window.service';\nimport { Viewport } from './shared/viewport.model';\nimport * as eventData from './shared/event-data';\n\n/**\n * A simple lightweight library for Angular (2+) with no\n * external dependencies that detects when an element is within the\n * browser viewport and adds a `in-viewport` or `not-in-viewport` class\n * to the element.\n *\n * @example\n * ```\n * <p\n *  class=\"foo\"\n *  snInViewport\n *  (inViewportChange)=\"myEventHandler($event)\"\n *  [debounce]=\"300\">\n *  Amet tempor excepteur occaecat nulla.\n * </p>\n * ```\n *\n * @export\n * @class InViewportDirective\n */\n@Directive({\n  selector: '[inViewport], [snInViewport]'\n})\nexport class InViewportDirective implements AfterViewInit, OnDestroy {\n  /**\n   * If true means the element is in the browser viewport\n   *\n   * @private\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  private inViewport: boolean;\n  /**\n   * Observable that returns the size of the viewport\n   *\n   * @private\n   * @type {Subject<void>}\n   * @memberof InViewportDirective\n   */\n  private viewport$ = new Subject<void>();\n  /**\n   * Completes on component destroy lifecycle event\n   * use to handle unsubscription from infinite observables\n   *\n   * @type {Subject<void>}\n   * @memberof InViewportDirective\n   */\n  private ngUnsubscribe$ = new Subject<void>();\n  /**\n   * Emits event when `inViewport` value changes\n   * @type {EventEmitter<boolean>}\n   * @memberof InViewportDirective\n   */\n  @Output()\n  public inViewportChange = new EventEmitter<boolean>();\n  /**\n   * Amount of time in ms to wait for other scroll events\n   * before running event handler\n   *\n   * @type {number}\n   * @default 100\n   * @memberof InViewportDirective\n   */\n  @Input()\n  public debounce = 100;\n  /**\n   * A parent element to listen to scroll events from\n   *\n   * @type {*}\n   * @memberof InViewportDirective\n   */\n  @Input()\n  public parent: any;\n  /**\n   * Returns true if element is in viewport\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  @HostBinding(eventData.inViewportClass)\n  public get isInViewport(): boolean {\n    return this.inViewport;\n  }\n  /**\n   * Returns true if element is not in viewport\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  @HostBinding(eventData.notInViewportClass)\n  public get isNotInViewport(): boolean {\n    return !this.inViewport;\n  }\n  /**\n   * Get window viewport values\n   *\n   * @readonly\n   * @type {Viewport}\n   * @memberof InViewportDirective\n   */\n  public get viewport(): Viewport {\n    const bottom = this.win.innerHeight;\n    const left = 0;\n    const right = this.win.innerWidth;\n    const top = 0;\n    return { bottom, right, left, top };\n  }\n  /**\n   * Creates an instance of InViewportDirective.\n   * @param {ElementRef} el\n   * @param {WindowRef} win\n   * @param {ChangeDetectorRef} cdRef\n   * @param {NgZone} ngZone\n   * @memberof InViewportDirective\n   */\n  constructor(\n    private el: ElementRef,\n    private win: WindowRef,\n    private cdRef: ChangeDetectorRef,\n    private ngZone: NgZone\n  ) { }\n  /**\n   * Subscribe to `viewport$` observable which\n   * will call event handler\n   *\n   * @memberof InViewportDirective\n   */\n  public ngAfterViewInit(): void {\n    this.calculateInViewportStatus();\n    this.cdRef.detectChanges();\n\n    this.viewport$\n      .takeUntil(this.ngUnsubscribe$)\n      .debounceTime(this.debounce)\n      .subscribe(() => this.calculateInViewportStatus());\n\n    // Listen for window scroll/resize events.\n    this.ngZone.runOutsideAngular(() => {\n      Observable.merge(\n          fromEvent(this.win as any, eventData.eventWindowResize),\n          fromEvent(this.win as any, eventData.eventWindowScroll)\n        )\n        .auditTime(this.debounce)\n        .subscribe(() => this.onViewportChange());\n    });\n\n    if (this.parent) {\n      this.ngZone.runOutsideAngular(() => {\n        fromEvent(this.parent, eventData.eventScroll)\n          .auditTime(this.debounce)\n          .subscribe(() => this.onParentScroll());\n      });\n    }\n  }\n  /**\n   * Get window element from parent scroll event and\n   * emit next value in `viewport$` observable\n   *\n   * @memberof InViewportDirective\n   */\n  public onParentScroll() {\n    this.viewport$.next();\n  }\n  /**\n   * On window scroll/resize/load events\n   * emit next `viewport$` observable value\n   *\n   * @memberof InViewportDirective\n   */\n  public onViewportChange(): void {\n    this.viewport$.next();\n  }\n  /**\n   * Calculate inViewport status and emit event\n   * when viewport status has changed\n   *\n   * @memberof InViewportDirective\n   */\n  public calculateInViewportStatus(): void {\n    const el = this.el.nativeElement;\n    let inParentViewport = false;\n    let inWindowViewport = false;\n\n    if (this.parent) {\n      const parentBounds = this.parent.getBoundingClientRect();\n      inParentViewport = this.isInElementViewport(parentBounds, el);\n      inWindowViewport = this.isInElementViewport(this.viewport, this.parent);\n    } else {\n      inParentViewport = true;\n      inWindowViewport = this.isInElementViewport(this.viewport, el);\n    }\n    const oldInViewport = this.inViewport;\n    this.inViewport = (inParentViewport && inWindowViewport);\n\n    if (oldInViewport !== this.inViewport) {\n      this.ngZone.run(() => this.inViewportChange.emit(this.inViewport));\n    }\n  }\n  /**\n   * Returns true if an element is currently within the `viewport`\n   *\n   * @param {Viewport} viewport\n   * @param {*} el\n   * @returns {boolean}\n   * @memberof InViewportDirective\n   */\n  public isInElementViewport(viewport: Viewport, el: any): boolean {\n    // Check if `getBoundingClientRect` is a function in case running this code\n    // in an evironment without the DOM\n    if (typeof el.getBoundingClientRect === 'function') {\n      const elBounds = el.getBoundingClientRect();\n      return (\n        (\n          (elBounds.top >= viewport.top) && (elBounds.top <= viewport.bottom) ||\n          (elBounds.bottom >= viewport.top) && (elBounds.bottom <= viewport.bottom) ||\n          (elBounds.top <= viewport.top) && (elBounds.bottom >= viewport.bottom)\n        ) &&\n        (\n          (elBounds.left >= viewport.left) && (elBounds.left <= viewport.right) ||\n          (elBounds.right >= viewport.left) && (elBounds.right <= viewport.right) ||\n          (elBounds.left <= viewport.left && elBounds.right >= viewport.right)\n        )\n      );\n    } else {\n      return false;\n    }\n  }\n  /**\n   * trigger `ngUnsubscribe` complete on\n   * component destroy lifecycle hook\n   *\n   * @memberof InViewportDirective\n   */\n  public ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n}\n",
    "export const eventPathScroll = [\n  '$event.target.defaultView.innerHeight',\n  '$event.target.defaultView.innerWidth',\n  '$event.target.defaultView.scrollY',\n  '$event.target.defaultView.scrollX'\n];\nexport const eventPathResize = [\n  '$event.target.innerHeight',\n  '$event.target.innerWidth',\n  '$event.target.scrollY',\n  '$event.target.scrollX'\n];\nexport const eventWindowResize = 'resize';\nexport const eventWindowScroll = 'scroll';\nexport const inViewportClass = 'class.sn-viewport-in';\nexport const notInViewportClass = 'class.sn-viewport-out';\n\nexport const eventScroll = 'scroll';\n",
    "import { Injectable } from '@angular/core';\n\n/**\n * Service that acts a reference to window object\n * in platforms where `window` does not exists\n *\n * @export\n * @class WindowRef\n */\n@Injectable()\nexport class WindowRef {\n  innerWidth: number;\n  innerHeight: number;\n}\n"
  ],
  "names": [
    "__decorate",
    "eventData.notInViewportClass",
    "eventData.inViewportClass",
    "fromEvent",
    "eventData.eventScroll",
    "Observable",
    "eventData.eventWindowResize",
    "eventData.eventWindowScroll",
    "Subject"
  ],
  "mappings": "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"
}
