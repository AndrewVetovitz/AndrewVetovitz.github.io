{
  "version": 3,
  "file": "angular-inviewport.umd.min.js",
  "sources": [
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/window/window.service.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/shared/event-data.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/in-viewport.directive.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/in-viewport.module.ts",
    "~/@thisissoon/angular-inviewport/angular-inviewport.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\n\n/**\n * Service that acts a reference to window object\n * in platforms where `window` does not exists\n *\n * @export\n * @class WindowRef\n */\n@Injectable()\nexport class WindowRef {\n  innerWidth: number;\n  innerHeight: number;\n}\n",
    "export const eventPathScroll = [\n  '$event.target.defaultView.innerHeight',\n  '$event.target.defaultView.innerWidth',\n  '$event.target.defaultView.scrollY',\n  '$event.target.defaultView.scrollX'\n];\nexport const eventPathResize = [\n  '$event.target.innerHeight',\n  '$event.target.innerWidth',\n  '$event.target.scrollY',\n  '$event.target.scrollX'\n];\nexport const eventWindowResize = 'resize';\nexport const eventWindowScroll = 'scroll';\nexport const inViewportClass = 'class.sn-viewport-in';\nexport const notInViewportClass = 'class.sn-viewport-out';\n\nexport const eventScroll = 'scroll';\n",
    "import {\n  Directive, ElementRef, HostBinding, EventEmitter,\n  Input, Output, OnDestroy, AfterViewInit,\n  ChangeDetectorRef, NgZone\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport 'rxjs/add/operator/auditTime';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/takeUntil';\nimport 'rxjs/add/observable/merge';\n\nimport { WindowRef } from './window/window.service';\nimport { Viewport } from './shared/viewport.model';\nimport * as eventData from './shared/event-data';\n\n/**\n * A simple lightweight library for Angular (2+) with no\n * external dependencies that detects when an element is within the\n * browser viewport and adds a `in-viewport` or `not-in-viewport` class\n * to the element.\n *\n * @example\n * ```\n * <p\n *  class=\"foo\"\n *  snInViewport\n *  (inViewportChange)=\"myEventHandler($event)\"\n *  [debounce]=\"300\">\n *  Amet tempor excepteur occaecat nulla.\n * </p>\n * ```\n *\n * @export\n * @class InViewportDirective\n */\n@Directive({\n  selector: '[inViewport], [snInViewport]'\n})\nexport class InViewportDirective implements AfterViewInit, OnDestroy {\n  /**\n   * If true means the element is in the browser viewport\n   *\n   * @private\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  private inViewport: boolean;\n  /**\n   * Observable that returns the size of the viewport\n   *\n   * @private\n   * @type {Subject<void>}\n   * @memberof InViewportDirective\n   */\n  private viewport$ = new Subject<void>();\n  /**\n   * Completes on component destroy lifecycle event\n   * use to handle unsubscription from infinite observables\n   *\n   * @type {Subject<void>}\n   * @memberof InViewportDirective\n   */\n  private ngUnsubscribe$ = new Subject<void>();\n  /**\n   * Emits event when `inViewport` value changes\n   * @type {EventEmitter<boolean>}\n   * @memberof InViewportDirective\n   */\n  @Output()\n  public inViewportChange = new EventEmitter<boolean>();\n  /**\n   * Amount of time in ms to wait for other scroll events\n   * before running event handler\n   *\n   * @type {number}\n   * @default 100\n   * @memberof InViewportDirective\n   */\n  @Input()\n  public debounce = 100;\n  /**\n   * A parent element to listen to scroll events from\n   *\n   * @type {*}\n   * @memberof InViewportDirective\n   */\n  @Input()\n  public parent: any;\n  /**\n   * Returns true if element is in viewport\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  @HostBinding(eventData.inViewportClass)\n  public get isInViewport(): boolean {\n    return this.inViewport;\n  }\n  /**\n   * Returns true if element is not in viewport\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  @HostBinding(eventData.notInViewportClass)\n  public get isNotInViewport(): boolean {\n    return !this.inViewport;\n  }\n  /**\n   * Get window viewport values\n   *\n   * @readonly\n   * @type {Viewport}\n   * @memberof InViewportDirective\n   */\n  public get viewport(): Viewport {\n    const bottom = this.win.innerHeight;\n    const left = 0;\n    const right = this.win.innerWidth;\n    const top = 0;\n    return { bottom, right, left, top };\n  }\n  /**\n   * Creates an instance of InViewportDirective.\n   * @param {ElementRef} el\n   * @param {WindowRef} win\n   * @param {ChangeDetectorRef} cdRef\n   * @param {NgZone} ngZone\n   * @memberof InViewportDirective\n   */\n  constructor(\n    private el: ElementRef,\n    private win: WindowRef,\n    private cdRef: ChangeDetectorRef,\n    private ngZone: NgZone\n  ) { }\n  /**\n   * Subscribe to `viewport$` observable which\n   * will call event handler\n   *\n   * @memberof InViewportDirective\n   */\n  public ngAfterViewInit(): void {\n    this.calculateInViewportStatus();\n    this.cdRef.detectChanges();\n\n    this.viewport$\n      .takeUntil(this.ngUnsubscribe$)\n      .debounceTime(this.debounce)\n      .subscribe(() => this.calculateInViewportStatus());\n\n    // Listen for window scroll/resize events.\n    this.ngZone.runOutsideAngular(() => {\n      Observable.merge(\n          fromEvent(this.win as any, eventData.eventWindowResize),\n          fromEvent(this.win as any, eventData.eventWindowScroll)\n        )\n        .auditTime(this.debounce)\n        .subscribe(() => this.onViewportChange());\n    });\n\n    if (this.parent) {\n      this.ngZone.runOutsideAngular(() => {\n        fromEvent(this.parent, eventData.eventScroll)\n          .auditTime(this.debounce)\n          .subscribe(() => this.onParentScroll());\n      });\n    }\n  }\n  /**\n   * Get window element from parent scroll event and\n   * emit next value in `viewport$` observable\n   *\n   * @memberof InViewportDirective\n   */\n  public onParentScroll() {\n    this.viewport$.next();\n  }\n  /**\n   * On window scroll/resize/load events\n   * emit next `viewport$` observable value\n   *\n   * @memberof InViewportDirective\n   */\n  public onViewportChange(): void {\n    this.viewport$.next();\n  }\n  /**\n   * Calculate inViewport status and emit event\n   * when viewport status has changed\n   *\n   * @memberof InViewportDirective\n   */\n  public calculateInViewportStatus(): void {\n    const el = this.el.nativeElement;\n    let inParentViewport = false;\n    let inWindowViewport = false;\n\n    if (this.parent) {\n      const parentBounds = this.parent.getBoundingClientRect();\n      inParentViewport = this.isInElementViewport(parentBounds, el);\n      inWindowViewport = this.isInElementViewport(this.viewport, this.parent);\n    } else {\n      inParentViewport = true;\n      inWindowViewport = this.isInElementViewport(this.viewport, el);\n    }\n    const oldInViewport = this.inViewport;\n    this.inViewport = (inParentViewport && inWindowViewport);\n\n    if (oldInViewport !== this.inViewport) {\n      this.ngZone.run(() => this.inViewportChange.emit(this.inViewport));\n    }\n  }\n  /**\n   * Returns true if an element is currently within the `viewport`\n   *\n   * @param {Viewport} viewport\n   * @param {*} el\n   * @returns {boolean}\n   * @memberof InViewportDirective\n   */\n  public isInElementViewport(viewport: Viewport, el: any): boolean {\n    // Check if `getBoundingClientRect` is a function in case running this code\n    // in an evironment without the DOM\n    if (typeof el.getBoundingClientRect === 'function') {\n      const elBounds = el.getBoundingClientRect();\n      return (\n        (\n          (elBounds.top >= viewport.top) && (elBounds.top <= viewport.bottom) ||\n          (elBounds.bottom >= viewport.top) && (elBounds.bottom <= viewport.bottom) ||\n          (elBounds.top <= viewport.top) && (elBounds.bottom >= viewport.bottom)\n        ) &&\n        (\n          (elBounds.left >= viewport.left) && (elBounds.left <= viewport.right) ||\n          (elBounds.right >= viewport.left) && (elBounds.right <= viewport.right) ||\n          (elBounds.left <= viewport.left && elBounds.right >= viewport.right)\n        )\n      );\n    } else {\n      return false;\n    }\n  }\n  /**\n   * trigger `ngUnsubscribe` complete on\n   * component destroy lifecycle hook\n   *\n   * @memberof InViewportDirective\n   */\n  public ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n}\n",
    "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { WindowRef } from './window/window.service';\n\nimport { InViewportDirective } from './in-viewport.directive';\n\nconst defaultProviders: Provider[] = [\n  WindowRef\n];\n\n/**\n * A simple lightweight library for Angular 2/4+ with other dependencies\n * that detects when an element is within the browser viewport and adds a\n * sn-viewport-in or sn-viewport-out class to the element.\n *\n * @export\n * @class InViewportModule\n */\n@NgModule({\n  declarations: [InViewportDirective],\n  exports: [InViewportDirective]\n})\nexport class InViewportModule {\n  /**\n   * Specify a static method for root module to ensure providers are only provided once\n   * but allows the module to still be imported into other modules without reproviding\n   * services.\n   *\n   * @static\n   * @returns {ModuleWithProviders}\n   * @memberof InViewportModule\n   */\n  public static forRoot(providers: Provider[] = defaultProviders): ModuleWithProviders {\n    return {\n      ngModule: InViewportModule,\n      providers: providers\n    };\n  }\n}\n",
    "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"
  ],
  "names": [
    "r",
    "c",
    "d",
    "target",
    "key",
    "exports",
    "WindowRef",
    "__decorate$1",
    "Injectable",
    "i",
    "decorators",
    "length",
    "InViewportDirective",
    "this",
    "cdRef",
    "inViewportChange",
    "EventEmitter",
    "debounce",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "inViewport",
    "bottom",
    "win",
    "innerHeight",
    "right",
    "innerWidth",
    "left",
    "top",
    "Observable",
    "enumerable",
    "configurable",
    "debounceTime",
    "subscribe",
    "_this",
    "calculateInViewportStatus",
    "ngZone",
    "runOutsideAngular",
    "fromEvent$1",
    "parent",
    "auditTime",
    "onParentScroll",
    "viewport$",
    "next",
    "onViewportChange",
    "inWindowViewport",
    "isInElementViewport",
    "viewport",
    "inParentViewport",
    "el",
    "oldInViewport",
    "run",
    "emit",
    "getBoundingClientRect",
    "__decorate",
    "elBounds",
    "ngOnDestroy",
    "__decorate$2",
    "Output",
    "__metadata",
    "Input",
    "Boolean",
    "defaultProviders",
    "InViewportModule",
    "InViewportModule_1"
  ],
  "mappings": "ggCAAAA,GAAAC,EAAA,EAAAC,EAAAF,GAAAC,EAAA,EAAAC,EAAAC,EAAAC,EAAAJ,GAAAE,EAAAC,EAAAC,KAAAJ,kDASAK,EAAAC,UAAA,WCTA,ODUA,aADA,GCPAA,EAAAA,UAAAC,GACEC,EAAAA,cACFF,EAAAA,WACA,uRCLA,IAAA,IAAAG,EAAAC,EAAAC,OAAA,EAAAF,GAAA,EAAAA,yOAsIAJ,EAAAO,oBAAA,oDA9EUC,KAAVC,MAAAA,+EAyBSD,KAATE,iBAAA,IAAAC,EAAAA,aAiBaH,KAAbI,SAAA,IA1DA,OA4DAC,OAAAC,eAAAP,EAAAQ,UAAA,gBASaC,IAAb,WACA,OAAAR,KAAAS,iGAaID,IAAJ,WACA,OAAAR,KAAqBS,0FA4BrBD,IAAO,WASP,OAAAE,OARAV,KAAAW,IAA4BC,YAQ5BC,MALAb,KAAAW,IAAAG,WAKAC,OAAAC,IAJAC,IAMAC,YAAA,EAEIC,cAAJ,gKAcAC,aAAApB,KAAAI,UACSiB,UAAU,WAAnB,OAAAC,EAAAC,2OAQAvB,KAAAwB,OAAAC,kBAAA,WACAC,EAAAA,UAAAJ,EAAAK,iBACAC,UAAAN,EAAAlB,8DAYAL,EAAAQ,UAAAsB,eAAA,WACA7B,KAAA8B,UAAAC,QAOAhC,EAAAQ,UAA8ByB,iBAA9B,WACIhC,KAAK8B,UAAUC,sGAcnB,GAAA/B,KAAA2B,OAAA,2EAGQM,EAARjC,KAAAkC,oBAAAlC,KAAAmC,SAAAnC,KAAA2B,aAKAS,GAAA,EACAH,EAAAjC,KAAAkC,oBAAAlC,KAAAmC,SAAAE,GAIA,IAAAC,EAAAtC,KAAAS,WACAT,KAAAS,WAAA2B,GAAqCH,EAGrCK,IAAAtC,KAAAS,YAAAT,KAAAwB,OAAAe,IAAA,WAAA,OAAAjB,EAAApB,iBAAAsC,KAAAlB,EAAAb,eAWAV,EAAAQ,UAA8B2B,oBAA9B,SAAAC,EAAAE,GAGA,GAAA,mBAAAA,EAAAI,sBAAA,CAzLA,IAAAC,EAAAA,EAAAA,wBADW,OAAXC,EAAA3B,KAAAmB,EAAAnB,KAAA2B,EAAA3B,KAAAmB,EAAAzB,6CACAiC,EAAA3B,KAAAmB,EAAAnB,KAAA2B,EAAAjC,QAAAyB,EAAAzB,UAUAgC,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,MAAAA,EAAAA,OADAC,EAAA9B,OAAAsB,EAAApB,MAAA4B,EAAA9B,OAAAsB,EAAAtB,yCAQA,OAAA,GAoBGd,EAAHQ,UAA2CqC,YAA3C,sEApEA7C,EAgG0B,GAlG1B8C,GACAC,EAAAA,SAgGAC,EAAA,cAAA1C,SACAN,EAAAA,oBAAAQ,UAAA,wBAAA,GACAsC,GACAG,EAAAA,QAlGAD,EAAA,cAAA1C,uKCxCA0C,EAAA,cAAAE,SAMEF,EAAF,yBACAhD,EAAAA,oBAAAQ,UAAA,eAAA,iiBAyBI,IAAJ,IAAAX,EAAAC,EAAAC,OAAA,EAAAF,GAAA,EAAAA,KACAP,EAAcQ,EAAdD,MACAT,GAAeC,EAAf,EAAAC,EAAAF,GAAAC,EAAA,EAAAC,EAAAC,EAAAC,EAAAJ,GAAAE,EAAAC,EAAAC,KAAAJ,GACA,OAAAC,EAAA,GAAAD,GAAAkB,OAAAC,eAAAhB,EAAAC,EAAAJ,GAAAA,GAEA+D,GAhBAzD,EAAAA,WCnBA0D,EAAAA,iBAAAC,EAAA,2GAAA,4JHUA,4BACA,2BACA,wBACA,4CATA,wCACE,uCACA,oCACA"
}
