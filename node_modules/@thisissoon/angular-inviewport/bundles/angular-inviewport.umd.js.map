{
  "version": 3,
  "file": "angular-inviewport.umd.js",
  "sources": [
    "~/@thisissoon/angular-inviewport/angular-inviewport.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/in-viewport.module.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/in-viewport.directive.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/shared/event-data.ts",
    "~/@thisissoon/angular-inviewport/src/app/in-viewport/window/window.service.ts"
  ],
  "sourcesContent": [
    "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n",
    "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { WindowRef } from './window/window.service';\n\nimport { InViewportDirective } from './in-viewport.directive';\n\nconst defaultProviders: Provider[] = [\n  WindowRef\n];\n\n/**\n * A simple lightweight library for Angular 2/4+ with other dependencies\n * that detects when an element is within the browser viewport and adds a\n * sn-viewport-in or sn-viewport-out class to the element.\n *\n * @export\n * @class InViewportModule\n */\n@NgModule({\n  declarations: [InViewportDirective],\n  exports: [InViewportDirective]\n})\nexport class InViewportModule {\n  /**\n   * Specify a static method for root module to ensure providers are only provided once\n   * but allows the module to still be imported into other modules without reproviding\n   * services.\n   *\n   * @static\n   * @returns {ModuleWithProviders}\n   * @memberof InViewportModule\n   */\n  public static forRoot(providers: Provider[] = defaultProviders): ModuleWithProviders {\n    return {\n      ngModule: InViewportModule,\n      providers: providers\n    };\n  }\n}\n",
    "import {\n  Directive, ElementRef, HostBinding, EventEmitter,\n  Input, Output, OnDestroy, AfterViewInit,\n  ChangeDetectorRef, NgZone\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport 'rxjs/add/operator/auditTime';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/takeUntil';\nimport 'rxjs/add/observable/merge';\n\nimport { WindowRef } from './window/window.service';\nimport { Viewport } from './shared/viewport.model';\nimport * as eventData from './shared/event-data';\n\n/**\n * A simple lightweight library for Angular (2+) with no\n * external dependencies that detects when an element is within the\n * browser viewport and adds a `in-viewport` or `not-in-viewport` class\n * to the element.\n *\n * @example\n * ```\n * <p\n *  class=\"foo\"\n *  snInViewport\n *  (inViewportChange)=\"myEventHandler($event)\"\n *  [debounce]=\"300\">\n *  Amet tempor excepteur occaecat nulla.\n * </p>\n * ```\n *\n * @export\n * @class InViewportDirective\n */\n@Directive({\n  selector: '[inViewport], [snInViewport]'\n})\nexport class InViewportDirective implements AfterViewInit, OnDestroy {\n  /**\n   * If true means the element is in the browser viewport\n   *\n   * @private\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  private inViewport: boolean;\n  /**\n   * Observable that returns the size of the viewport\n   *\n   * @private\n   * @type {Subject<void>}\n   * @memberof InViewportDirective\n   */\n  private viewport$ = new Subject<void>();\n  /**\n   * Completes on component destroy lifecycle event\n   * use to handle unsubscription from infinite observables\n   *\n   * @type {Subject<void>}\n   * @memberof InViewportDirective\n   */\n  private ngUnsubscribe$ = new Subject<void>();\n  /**\n   * Emits event when `inViewport` value changes\n   * @type {EventEmitter<boolean>}\n   * @memberof InViewportDirective\n   */\n  @Output()\n  public inViewportChange = new EventEmitter<boolean>();\n  /**\n   * Amount of time in ms to wait for other scroll events\n   * before running event handler\n   *\n   * @type {number}\n   * @default 100\n   * @memberof InViewportDirective\n   */\n  @Input()\n  public debounce = 100;\n  /**\n   * A parent element to listen to scroll events from\n   *\n   * @type {*}\n   * @memberof InViewportDirective\n   */\n  @Input()\n  public parent: any;\n  /**\n   * Returns true if element is in viewport\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  @HostBinding(eventData.inViewportClass)\n  public get isInViewport(): boolean {\n    return this.inViewport;\n  }\n  /**\n   * Returns true if element is not in viewport\n   *\n   * @readonly\n   * @type {boolean}\n   * @memberof InViewportDirective\n   */\n  @HostBinding(eventData.notInViewportClass)\n  public get isNotInViewport(): boolean {\n    return !this.inViewport;\n  }\n  /**\n   * Get window viewport values\n   *\n   * @readonly\n   * @type {Viewport}\n   * @memberof InViewportDirective\n   */\n  public get viewport(): Viewport {\n    const bottom = this.win.innerHeight;\n    const left = 0;\n    const right = this.win.innerWidth;\n    const top = 0;\n    return { bottom, right, left, top };\n  }\n  /**\n   * Creates an instance of InViewportDirective.\n   * @param {ElementRef} el\n   * @param {WindowRef} win\n   * @param {ChangeDetectorRef} cdRef\n   * @param {NgZone} ngZone\n   * @memberof InViewportDirective\n   */\n  constructor(\n    private el: ElementRef,\n    private win: WindowRef,\n    private cdRef: ChangeDetectorRef,\n    private ngZone: NgZone\n  ) { }\n  /**\n   * Subscribe to `viewport$` observable which\n   * will call event handler\n   *\n   * @memberof InViewportDirective\n   */\n  public ngAfterViewInit(): void {\n    this.calculateInViewportStatus();\n    this.cdRef.detectChanges();\n\n    this.viewport$\n      .takeUntil(this.ngUnsubscribe$)\n      .debounceTime(this.debounce)\n      .subscribe(() => this.calculateInViewportStatus());\n\n    // Listen for window scroll/resize events.\n    this.ngZone.runOutsideAngular(() => {\n      Observable.merge(\n          fromEvent(this.win as any, eventData.eventWindowResize),\n          fromEvent(this.win as any, eventData.eventWindowScroll)\n        )\n        .auditTime(this.debounce)\n        .subscribe(() => this.onViewportChange());\n    });\n\n    if (this.parent) {\n      this.ngZone.runOutsideAngular(() => {\n        fromEvent(this.parent, eventData.eventScroll)\n          .auditTime(this.debounce)\n          .subscribe(() => this.onParentScroll());\n      });\n    }\n  }\n  /**\n   * Get window element from parent scroll event and\n   * emit next value in `viewport$` observable\n   *\n   * @memberof InViewportDirective\n   */\n  public onParentScroll() {\n    this.viewport$.next();\n  }\n  /**\n   * On window scroll/resize/load events\n   * emit next `viewport$` observable value\n   *\n   * @memberof InViewportDirective\n   */\n  public onViewportChange(): void {\n    this.viewport$.next();\n  }\n  /**\n   * Calculate inViewport status and emit event\n   * when viewport status has changed\n   *\n   * @memberof InViewportDirective\n   */\n  public calculateInViewportStatus(): void {\n    const el = this.el.nativeElement;\n    let inParentViewport = false;\n    let inWindowViewport = false;\n\n    if (this.parent) {\n      const parentBounds = this.parent.getBoundingClientRect();\n      inParentViewport = this.isInElementViewport(parentBounds, el);\n      inWindowViewport = this.isInElementViewport(this.viewport, this.parent);\n    } else {\n      inParentViewport = true;\n      inWindowViewport = this.isInElementViewport(this.viewport, el);\n    }\n    const oldInViewport = this.inViewport;\n    this.inViewport = (inParentViewport && inWindowViewport);\n\n    if (oldInViewport !== this.inViewport) {\n      this.ngZone.run(() => this.inViewportChange.emit(this.inViewport));\n    }\n  }\n  /**\n   * Returns true if an element is currently within the `viewport`\n   *\n   * @param {Viewport} viewport\n   * @param {*} el\n   * @returns {boolean}\n   * @memberof InViewportDirective\n   */\n  public isInElementViewport(viewport: Viewport, el: any): boolean {\n    // Check if `getBoundingClientRect` is a function in case running this code\n    // in an evironment without the DOM\n    if (typeof el.getBoundingClientRect === 'function') {\n      const elBounds = el.getBoundingClientRect();\n      return (\n        (\n          (elBounds.top >= viewport.top) && (elBounds.top <= viewport.bottom) ||\n          (elBounds.bottom >= viewport.top) && (elBounds.bottom <= viewport.bottom) ||\n          (elBounds.top <= viewport.top) && (elBounds.bottom >= viewport.bottom)\n        ) &&\n        (\n          (elBounds.left >= viewport.left) && (elBounds.left <= viewport.right) ||\n          (elBounds.right >= viewport.left) && (elBounds.right <= viewport.right) ||\n          (elBounds.left <= viewport.left && elBounds.right >= viewport.right)\n        )\n      );\n    } else {\n      return false;\n    }\n  }\n  /**\n   * trigger `ngUnsubscribe` complete on\n   * component destroy lifecycle hook\n   *\n   * @memberof InViewportDirective\n   */\n  public ngOnDestroy(): void {\n    this.ngUnsubscribe$.next();\n    this.ngUnsubscribe$.complete();\n  }\n}\n",
    "export const eventPathScroll = [\n  '$event.target.defaultView.innerHeight',\n  '$event.target.defaultView.innerWidth',\n  '$event.target.defaultView.scrollY',\n  '$event.target.defaultView.scrollX'\n];\nexport const eventPathResize = [\n  '$event.target.innerHeight',\n  '$event.target.innerWidth',\n  '$event.target.scrollY',\n  '$event.target.scrollX'\n];\nexport const eventWindowResize = 'resize';\nexport const eventWindowScroll = 'scroll';\nexport const inViewportClass = 'class.sn-viewport-in';\nexport const notInViewportClass = 'class.sn-viewport-out';\n\nexport const eventScroll = 'scroll';\n",
    "import { Injectable } from '@angular/core';\n\n/**\n * Service that acts a reference to window object\n * in platforms where `window` does not exists\n *\n * @export\n * @class WindowRef\n */\n@Injectable()\nexport class WindowRef {\n  innerWidth: number;\n  innerHeight: number;\n}\n"
  ],
  "names": [
    "InViewportModule",
    "WindowRef",
    "InViewportDirective",
    "Input",
    "Output",
    "__decorate",
    "fromEvent$1",
    "Observable",
    "EventEmitter",
    "Injectable"
  ],
  "mappings": "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"
}
