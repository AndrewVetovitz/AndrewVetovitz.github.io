{
  "version": 3,
  "file": "angular-scrollspy.umd.js",
  "sources": [
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy.module.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-section/scroll-spy-section.component.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy/scroll-spy.directive.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-service/scroll-spy.service.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-item/scroll-spy-item.directive.ts"
  ],
  "sourcesContent": [
    "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { InViewportModule } from '@thisissoon/angular-inviewport';\n\nimport { ScrollSpyDirective } from './scroll-spy/scroll-spy.directive';\nimport { ScrollSpySectionComponent } from './scroll-spy-section/scroll-spy-section.component';\nimport { ScrollSpyItemDirective } from './scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from './scroll-spy-service/scroll-spy.service';\n\nconst directives: any[] = [\n  ScrollSpyDirective,\n  ScrollSpyItemDirective,\n];\n\nconst components: any[] = [\n  ScrollSpySectionComponent\n];\n\nconst providers: Provider[] = [\n  ScrollSpyService\n];\n\n/**\n * A simple lightweight library for Angular 2/4+ which automatically\n * updates links to indicate the currently active section in the viewport\n *\n * @export\n * @class ScrollSpyModule\n */\n@NgModule({\n  imports: [\n    InViewportModule\n  ],\n  declarations: [\n    ...directives,\n    ...components\n  ],\n  exports: [\n    ...directives,\n    ...components\n  ]\n})\nexport class ScrollSpyModule {\n  /**\n   * Specify a static method for root module to ensure providers are\n   * only provided once but allows the module to still be imported\n   * into other modules without reproviding services.\n   *\n   * @static\n   * @returns {ModuleWithProviders}\n   * @memberof ScrollSpyModule\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ScrollSpyModule,\n      providers: [\n        ...providers\n      ]\n    };\n  }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * A component to wrap section content within that will update the\n * `ScrollSpyService` when it's in view\n *\n * @example\n * ```\n *  <sn-scroll-spy-section id=\"section1\" for=\"foo\">\n *    ...\n *  </sn-scroll-spy-section>\n * ```\n *\n * @export\n * @class ScrollSpySectionComponent\n */\n@Component({\n  selector: 'sn-scroll-spy-section',\n  template: `\n    <div\n      class=\"sn-hidden\"\n      snInViewport\n      (inViewportChange)=\"onInViewportChange($event)\"\n      [debounce]=\"debounce\">\n    </div>\n    <ng-content></ng-content>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      position: relative; }\n\n    .sn-hidden {\n      bottom: 0;\n      left: 0;\n      opacity: 0;\n      position: absolute;\n      right: 0;\n      top: 0;\n      z-index: -1; }\n  `]\n})\nexport class ScrollSpySectionComponent {\n  /**\n   * Identifies the section\n   *\n   * @type {string}\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public id: string;\n  /**\n   * Specifies which `ScrollSpy` instance to update\n   *\n   * @type {string}\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public for: string;\n  /**\n   * Amount of time in ms to wait for other scroll events\n   * before running event handler\n   *\n   * @type {number}\n   * @default 0\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public debounce = 0;\n  /**\n   * Creates an instance of ScrollSpySectionComponent.\n   * @param {ScrollSpyService} scrollSpySvc\n   * @memberof ScrollSpySectionComponent\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) { }\n  /**\n   * Updates `ScrollSpy` section when element enters/leaves viewport\n   *\n   * @param {boolean} inViewport\n   * @memberof ScrollSpySectionComponent\n   */\n  public onInViewportChange(inViewport: boolean): void {\n    this.scrollSpySvc.setSpySectionStatus(this.id, this.for, inViewport);\n  }\n}\n",
    "import {\n  Directive, ContentChildren, QueryList, AfterViewInit,\n  Input, OnDestroy\n} from '@angular/core';\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * Adds `active` class to navigation links when section is in the viewport.\n * Used in conjuction with `snScrollItem` directive which should be added\n * to anchor links in the nav\n *\n * @example\n * ```\n * <ul role=\"navigation\" snScrollSpy id=\"foo\">\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section2\">Section 2</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section3\">Section 3</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section4\">Section 4</a></li>\n * </ul>\n * ```\n *\n * @export\n * @class ScrollSpyDirective\n * @implements {AfterViewInit}\n * @implements {OnDestroy}\n */\n@Directive({\n  selector: '[snScrollSpy]',\n  queries: {\n    spyItems: new ContentChildren(ScrollSpyItemDirective)\n  }\n})\nexport class ScrollSpyDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Collection of `ScrollSpyItem`. They are the list of\n   * nav items.\n   *\n   * @type {QueryList<ScrollSpyItemDirective>}\n   * @memberof ScrollSpyDirective\n   */\n  @ContentChildren(ScrollSpyItemDirective)\n  public items: QueryList<ScrollSpyItemDirective>;\n  /**\n   * ID of scrollSpy instance\n   *\n   * @type {string}\n   * @memberof ScrollSpyDirective\n   */\n  @Input()\n  public id: string;\n  /**\n   * Creates an instance of ScrollSpyDirective.\n   * @param {ScrollSpyService} scrollSpySvc\n   * @memberof ScrollSpyDirective\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) { }\n  /**\n   * Adds spy to list of spys in `ScrollSpyService`\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngAfterViewInit(): void {\n    this.scrollSpySvc.addSpy(this.id, this.items);\n  }\n  /**\n   * Remove spy from list of spys when directive is destroyed\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngOnDestroy(): void {\n    this.scrollSpySvc.removeSpy(this.id);\n  }\n}\n",
    "import { Injectable, QueryList } from '@angular/core';\n\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { Spy } from '../shared/spy.model';\n\n/**\n * Service that stores a list of `Spy`'s and the state\n * of their nav items `inViewport` and `active` state\n *\n * @export\n * @class ScrollSpyService\n */\n@Injectable()\nexport class ScrollSpyService {\n  /**\n   * List of `Spy`'s\n   *\n   * @type {Spy[]}\n   * @memberof ScrollSpyService\n   */\n  public spys: Spy[] = [];\n  /**\n   * Stores requests to add items to spy when spy hasn't been created\n   * yet. Once spy has been added then request will be made again.\n   *\n   * @type {any[]}\n   * @memberof ScrollSpyService\n   */\n  public buffer: any[] = [];\n  /**\n   * Add spy to list of `spys`\n   *\n   * @param {string} id\n   * @param {QueryList<ScrollSpyItemDirective>} items\n   * @memberof ScrollSpyService\n   */\n  public addSpy(id: string, items: QueryList<ScrollSpyItemDirective>): void {\n    this.spys.push({ id, items });\n    const buffer = this.buffer.filter((i) => i.spyId === id);\n    this.buffer = this.buffer.filter((i) => i.spyId !== id);\n    buffer.forEach((i) => this.setSpySectionStatus(i.sectionId, i.spyId, i.inViewport));\n  }\n  /**\n   * Remove spy from list of `spys`\n   *\n   * @param {string} id\n   * @memberof ScrollSpyService\n   */\n  public removeSpy(id: string): void {\n    const i = this.spys.findIndex((s) => s.id === id);\n    this.spys.splice(i, 1);\n  }\n  /**\n   * Set the `inViewport` status for a spy item then sets the active\n   * to true for the first item in the list that has `inViewport`\n   * set to true\n   *\n   * @param {string} sectionId\n   * @param {string} spyId\n   * @param {boolean} inViewport\n   * @returns {void}\n   * @memberof ScrollSpyService\n   */\n  public setSpySectionStatus(sectionId: string, spyId: string, inViewport: boolean): void {\n    const spy = this.spys.find((s) => s.id === spyId);\n    if (!spy) {\n      this.buffer.push({ sectionId, spyId, inViewport });\n      return;\n    }\n    const item = spy.items.find((i) => i.section === sectionId);\n    if (!item) { return; }\n\n    item.inViewport = inViewport;\n    const firstInViewport = spy.items.filter((i) => i.inViewport)[0];\n    spy.items.forEach((i) => i.active = false);\n\n    if (firstInViewport) {\n      firstInViewport.active = true;\n      firstInViewport.detectChanges();\n    }\n  }\n}\n",
    "import { Directive, Input, HostBinding, ChangeDetectorRef } from '@angular/core';\n\n/**\n * A directive used to add an `active` class to a nav item\n * when the section is in the viewport\n *\n * @example\n * ```\n * <a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a>\n * ```\n *\n * @export\n * @class ScrollSpyItemDirective\n * @implements {AfterViewInit}\n * @implements {OnDestroy}\n */\n@Directive({\n  selector: '[snScrollSpyItem]'\n})\nexport class ScrollSpyItemDirective {\n  /**\n   * True if the nav item is the active item in the `items` list\n   * for `ScrollSpyDirective` instance\n   *\n   * @type {boolean}\n   * @memberof ScrollSpyItemDirective\n   */\n  @HostBinding('class.active')\n  public active = false;\n  /**\n   * ID of `ScrollSpyDirective` instance\n   *\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public for: string;\n  /**\n   * Hash for section to link to\n   *\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public href: string;\n  /**\n   * If true means the section is in the viewport\n   *\n   * @type {boolean}\n   * @memberof ScrollSpyItemDirective\n   */\n  public inViewport = false;\n  /**\n   * Id of section that links navigates to\n   *\n   * @readonly\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  public get section(): string {\n    return this.href.replace('#', '');\n  }\n  /**\n   * Creates an instance of ScrollSpyItemDirective.\n   * @param {ChangeDetectorRef} cdRef\n   * @memberof ScrollSpyItemDirective\n   */\n  constructor(private cdRef: ChangeDetectorRef) { }\n  /**\n   * Manually trigger change detection\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  public detectChanges(): void {\n    this.cdRef.detectChanges();\n  }\n}\n"
  ],
  "names": [
    "ScrollSpyModule",
    "InViewportModule",
    "NgModule",
    "ScrollSpyItemDirective",
    "ScrollSpyDirective",
    "__metadata",
    "Component",
    "__decorate",
    "ChangeDetectorRef",
    "Input",
    "this"
  ],
  "mappings": "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"
}
