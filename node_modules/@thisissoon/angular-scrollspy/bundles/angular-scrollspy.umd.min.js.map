{
  "version": 3,
  "file": "angular-scrollspy.umd.min.js",
  "sources": [
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-item/scroll-spy-item.directive.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-service/scroll-spy.service.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy/scroll-spy.directive.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-section/scroll-spy-section.component.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy.module.ts"
  ],
  "sourcesContent": [
    "import { Directive, Input, HostBinding, ChangeDetectorRef } from '@angular/core';\n\n/**\n * A directive used to add an `active` class to a nav item\n * when the section is in the viewport\n *\n * @example\n * ```\n * <a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a>\n * ```\n *\n * @export\n * @class ScrollSpyItemDirective\n * @implements {AfterViewInit}\n * @implements {OnDestroy}\n */\n@Directive({\n  selector: '[snScrollSpyItem]'\n})\nexport class ScrollSpyItemDirective {\n  /**\n   * True if the nav item is the active item in the `items` list\n   * for `ScrollSpyDirective` instance\n   *\n   * @type {boolean}\n   * @memberof ScrollSpyItemDirective\n   */\n  @HostBinding('class.active')\n  public active = false;\n  /**\n   * ID of `ScrollSpyDirective` instance\n   *\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public for: string;\n  /**\n   * Hash for section to link to\n   *\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public href: string;\n  /**\n   * If true means the section is in the viewport\n   *\n   * @type {boolean}\n   * @memberof ScrollSpyItemDirective\n   */\n  public inViewport = false;\n  /**\n   * Id of section that links navigates to\n   *\n   * @readonly\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  public get section(): string {\n    return this.href.replace('#', '');\n  }\n  /**\n   * Creates an instance of ScrollSpyItemDirective.\n   * @param {ChangeDetectorRef} cdRef\n   * @memberof ScrollSpyItemDirective\n   */\n  constructor(private cdRef: ChangeDetectorRef) { }\n  /**\n   * Manually trigger change detection\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  public detectChanges(): void {\n    this.cdRef.detectChanges();\n  }\n}\n",
    "import { Injectable, QueryList } from '@angular/core';\n\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { Spy } from '../shared/spy.model';\n\n/**\n * Service that stores a list of `Spy`'s and the state\n * of their nav items `inViewport` and `active` state\n *\n * @export\n * @class ScrollSpyService\n */\n@Injectable()\nexport class ScrollSpyService {\n  /**\n   * List of `Spy`'s\n   *\n   * @type {Spy[]}\n   * @memberof ScrollSpyService\n   */\n  public spys: Spy[] = [];\n  /**\n   * Stores requests to add items to spy when spy hasn't been created\n   * yet. Once spy has been added then request will be made again.\n   *\n   * @type {any[]}\n   * @memberof ScrollSpyService\n   */\n  public buffer: any[] = [];\n  /**\n   * Add spy to list of `spys`\n   *\n   * @param {string} id\n   * @param {QueryList<ScrollSpyItemDirective>} items\n   * @memberof ScrollSpyService\n   */\n  public addSpy(id: string, items: QueryList<ScrollSpyItemDirective>): void {\n    this.spys.push({ id, items });\n    const buffer = this.buffer.filter((i) => i.spyId === id);\n    this.buffer = this.buffer.filter((i) => i.spyId !== id);\n    buffer.forEach((i) => this.setSpySectionStatus(i.sectionId, i.spyId, i.inViewport));\n  }\n  /**\n   * Remove spy from list of `spys`\n   *\n   * @param {string} id\n   * @memberof ScrollSpyService\n   */\n  public removeSpy(id: string): void {\n    const i = this.spys.findIndex((s) => s.id === id);\n    this.spys.splice(i, 1);\n  }\n  /**\n   * Set the `inViewport` status for a spy item then sets the active\n   * to true for the first item in the list that has `inViewport`\n   * set to true\n   *\n   * @param {string} sectionId\n   * @param {string} spyId\n   * @param {boolean} inViewport\n   * @returns {void}\n   * @memberof ScrollSpyService\n   */\n  public setSpySectionStatus(sectionId: string, spyId: string, inViewport: boolean): void {\n    const spy = this.spys.find((s) => s.id === spyId);\n    if (!spy) {\n      this.buffer.push({ sectionId, spyId, inViewport });\n      return;\n    }\n    const item = spy.items.find((i) => i.section === sectionId);\n    if (!item) { return; }\n\n    item.inViewport = inViewport;\n    const firstInViewport = spy.items.filter((i) => i.inViewport)[0];\n    spy.items.forEach((i) => i.active = false);\n\n    if (firstInViewport) {\n      firstInViewport.active = true;\n      firstInViewport.detectChanges();\n    }\n  }\n}\n",
    "import {\n  Directive, ContentChildren, QueryList, AfterViewInit,\n  Input, OnDestroy\n} from '@angular/core';\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * Adds `active` class to navigation links when section is in the viewport.\n * Used in conjuction with `snScrollItem` directive which should be added\n * to anchor links in the nav\n *\n * @example\n * ```\n * <ul role=\"navigation\" snScrollSpy id=\"foo\">\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section2\">Section 2</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section3\">Section 3</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section4\">Section 4</a></li>\n * </ul>\n * ```\n *\n * @export\n * @class ScrollSpyDirective\n * @implements {AfterViewInit}\n * @implements {OnDestroy}\n */\n@Directive({\n  selector: '[snScrollSpy]',\n  queries: {\n    spyItems: new ContentChildren(ScrollSpyItemDirective)\n  }\n})\nexport class ScrollSpyDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Collection of `ScrollSpyItem`. They are the list of\n   * nav items.\n   *\n   * @type {QueryList<ScrollSpyItemDirective>}\n   * @memberof ScrollSpyDirective\n   */\n  @ContentChildren(ScrollSpyItemDirective)\n  public items: QueryList<ScrollSpyItemDirective>;\n  /**\n   * ID of scrollSpy instance\n   *\n   * @type {string}\n   * @memberof ScrollSpyDirective\n   */\n  @Input()\n  public id: string;\n  /**\n   * Creates an instance of ScrollSpyDirective.\n   * @param {ScrollSpyService} scrollSpySvc\n   * @memberof ScrollSpyDirective\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) { }\n  /**\n   * Adds spy to list of spys in `ScrollSpyService`\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngAfterViewInit(): void {\n    this.scrollSpySvc.addSpy(this.id, this.items);\n  }\n  /**\n   * Remove spy from list of spys when directive is destroyed\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngOnDestroy(): void {\n    this.scrollSpySvc.removeSpy(this.id);\n  }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * A component to wrap section content within that will update the\n * `ScrollSpyService` when it's in view\n *\n * @example\n * ```\n *  <sn-scroll-spy-section id=\"section1\" for=\"foo\">\n *    ...\n *  </sn-scroll-spy-section>\n * ```\n *\n * @export\n * @class ScrollSpySectionComponent\n */\n@Component({\n  selector: 'sn-scroll-spy-section',\n  template: `\n    <div\n      class=\"sn-hidden\"\n      snInViewport\n      (inViewportChange)=\"onInViewportChange($event)\"\n      [debounce]=\"debounce\">\n    </div>\n    <ng-content></ng-content>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      position: relative; }\n\n    .sn-hidden {\n      bottom: 0;\n      left: 0;\n      opacity: 0;\n      position: absolute;\n      right: 0;\n      top: 0;\n      z-index: -1; }\n  `]\n})\nexport class ScrollSpySectionComponent {\n  /**\n   * Identifies the section\n   *\n   * @type {string}\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public id: string;\n  /**\n   * Specifies which `ScrollSpy` instance to update\n   *\n   * @type {string}\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public for: string;\n  /**\n   * Amount of time in ms to wait for other scroll events\n   * before running event handler\n   *\n   * @type {number}\n   * @default 0\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public debounce = 0;\n  /**\n   * Creates an instance of ScrollSpySectionComponent.\n   * @param {ScrollSpyService} scrollSpySvc\n   * @memberof ScrollSpySectionComponent\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) { }\n  /**\n   * Updates `ScrollSpy` section when element enters/leaves viewport\n   *\n   * @param {boolean} inViewport\n   * @memberof ScrollSpySectionComponent\n   */\n  public onInViewportChange(inViewport: boolean): void {\n    this.scrollSpySvc.setSpySectionStatus(this.id, this.for, inViewport);\n  }\n}\n",
    "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { InViewportModule } from '@thisissoon/angular-inviewport';\n\nimport { ScrollSpyDirective } from './scroll-spy/scroll-spy.directive';\nimport { ScrollSpySectionComponent } from './scroll-spy-section/scroll-spy-section.component';\nimport { ScrollSpyItemDirective } from './scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from './scroll-spy-service/scroll-spy.service';\n\nconst directives: any[] = [\n  ScrollSpyDirective,\n  ScrollSpyItemDirective,\n];\n\nconst components: any[] = [\n  ScrollSpySectionComponent\n];\n\nconst providers: Provider[] = [\n  ScrollSpyService\n];\n\n/**\n * A simple lightweight library for Angular 2/4+ which automatically\n * updates links to indicate the currently active section in the viewport\n *\n * @export\n * @class ScrollSpyModule\n */\n@NgModule({\n  imports: [\n    InViewportModule\n  ],\n  declarations: [\n    ...directives,\n    ...components\n  ],\n  exports: [\n    ...directives,\n    ...components\n  ]\n})\nexport class ScrollSpyModule {\n  /**\n   * Specify a static method for root module to ensure providers are\n   * only provided once but allows the module to still be imported\n   * into other modules without reproviding services.\n   *\n   * @static\n   * @returns {ModuleWithProviders}\n   * @memberof ScrollSpyModule\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ScrollSpyModule,\n      providers: [\n        ...providers\n      ]\n    };\n  }\n}\n"
  ],
  "names": [
    "__metadata$1",
    "this",
    "__metadata",
    "k",
    "v",
    "enumerable",
    "configurable",
    "__decorate",
    "cdRef",
    "detectChanges",
    "ScrollSpyItemDirective",
    "__decorate$1",
    "Object",
    "prototype",
    "Input",
    "String",
    "ChangeDetectorRef",
    "i",
    "decorators",
    "length",
    "buffer",
    "ScrollSpyService",
    "addSpy",
    "id",
    "items",
    "_this",
    "spys",
    "push",
    "filter",
    "spyId",
    "splice",
    "setSpySectionStatus",
    "sectionId",
    "inViewport",
    "spy",
    "find",
    "s",
    "item",
    "section",
    "ScrollSpyDirective",
    "scrollSpySvc",
    "ngOnDestroy",
    "removeSpy",
    "Reflect",
    "metadata",
    "ScrollSpySectionComponent",
    "debounce",
    "__decorate$3",
    "Component",
    "selector",
    "styles",
    "d",
    "r",
    "c",
    "target",
    "key",
    "defineProperty",
    "directives",
    "ScrollSpyModule",
    "forRoot",
    "ngModule",
    "ScrollSpyModule_1",
    "providers",
    "slice",
    "__decorate$4",
    "NgModule",
    "imports",
    "InViewportModule",
    "declarations",
    "concat",
    "components",
    "exports"
  ],
  "mappings": "wuBAAAA,EAAAC,MAAAA,KAAAC,YAAA,SAAAC,EAAAC,mMAoCA,qGAqCAC,YAAA,EACIC,cAAJ,IAtCAC,EAAAA,UAAAA,cAAAA,WADAN,KAAAO,MAAAC,iBACAC,KAOAC,iCACAX,EAAA,cAAAY,SAzBAF,EAAAA,uBAAAG,UAAA,cAAA,GAHAF,GACAG,EAAAA,QACAd,EAAA,cAAAe,SAiDAb,EAAAA,uBAAAA,UAAAA,WAAAA,GAhDAS,gKCnBAX,EAAA,qBAAAgB,EAAAA,mRAaA,IAAA,IAAAC,EAAAC,EAAAC,OAAA,EAAAF,GAAA,EAAAA,2JA0BIhB,KAAKmB,iBASAC,EAATR,UAAAS,OAAA,SAAAC,EAAAC,GACI,IAAJC,EAAAxB,KACIA,KAAKyB,KAAKC,MAAOJ,GAAIA,EAAzBC,MAAAA,IACA,IAAAJ,EAAAnB,KAAAmB,OAAAQ,OAAA,SAAAX,GAAA,OAAAA,EAAAY,QAAAN,sPAYAtB,KAAAyB,KAAAI,OAAAb,EAAA,IAaAI,EAAAR,UAAAkB,oBAAA,SAAAC,EAAAH,EAAAI,GACA,IAAMC,EAANjC,KAAAyB,KAAsBS,KAAtB,SAAAC,GAAA,OAAAA,EAAAb,KAAAM,IACA,GAAAK,EAAA,CAjEA,IAAAG,EAAA9B,EAAAiB,MAAAW,KAAA,SAAAlB,GAAA,OAAAA,EAAAqB,UAAAN,IADA,GAAAK,EAAA,oKAmEApC,KAAAmB,OAAAO,MAAAK,UAAAA,EAAAH,MAAAA,EAAAI,WAAAA,2kBCPA,SAAAM,EAAAC,GACAvC,KAAAuC,aAAAA,gDAvBAvC,KAAAuC,aAAAlB,OAAArB,KAAAsB,GAAAtB,KAAAuB,QAlBAe,EAAA1B,UAAA4B,YAAA,WAwBAxC,KAAAuC,aAAAE,UAAAzC,KAAAsB,wNCxDAgB,EAAAA,mBAAAhC,qZA2CA,IAAA,IAAAU,EAAAC,EAAAC,OAAA,EAAAF,GAAA,EAAAA,0IAgCE,GAAF,iBAAA0B,SAAA,mBAAAA,QAAAC,SAAsB,OAAtBD,QAAAC,SAAAzC,EAAAC,2CAzBG,SAAHyC,EAAAL,uBAmBAvC,KAAA6C,SAAA,uHAzCAC,iTAaIC,EAAAA,WACJC,SAAA,wBAiCA/C,SAAAA,8LAhCAgD,QAAA,mhBClCA,IAAA,IAAAjC,EAAAC,EAAAC,OAAA,EAAAF,GAAA,EAAAA,KACAkC,EAAAjC,EAAAD,MACAmC,GAAAC,EAAA,EAAAF,EAAAC,GAAAC,EAAA,EAAAF,EAAAG,EAAAC,EAAAH,GAAAD,EAAAG,EAAAC,KAAAH,GAEA,OAAAC,EAAA,GAAAD,GAAAxC,OAAA4C,eAAAF,EAAAC,EAAAH,GAAAA,GAEAK,GAEAlB,EAAAA,mBACE7B,EAAAA,4HAcF,OA2BAgD,EAAAC,QAAA,WAlBA,OAbSC,SAATC,EACAC,UAAAA,EAAAC,UAGAL,KAEAA,EAAAA,gBAAAG,EAAAG,GACAC,EAAAA,UACEC,SACEC,EAAAA,kBAEJC,aAAAX,EAAAY,OAAAC,GACAC,QAAAd,EAAAY,OAAAC,MACAZ,EAAAA"
}
