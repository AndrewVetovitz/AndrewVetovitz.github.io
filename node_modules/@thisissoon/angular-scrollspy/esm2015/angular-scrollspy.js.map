{
  "version": 3,
  "file": "angular-scrollspy.js",
  "sources": [
    "~/@thisissoon/angular-scrollspy/angular-scrollspy.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy.module.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-section/scroll-spy-section.component.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy/scroll-spy.directive.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-service/scroll-spy.service.ts",
    "~/@thisissoon/angular-scrollspy/src/app/scroll-spy/scroll-spy-item/scroll-spy-item.directive.ts"
  ],
  "sourcesContent": [
    "/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n",
    "import { NgModule, ModuleWithProviders, Provider } from '@angular/core';\nimport { InViewportModule } from '@thisissoon/angular-inviewport';\n\nimport { ScrollSpyDirective } from './scroll-spy/scroll-spy.directive';\nimport { ScrollSpySectionComponent } from './scroll-spy-section/scroll-spy-section.component';\nimport { ScrollSpyItemDirective } from './scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from './scroll-spy-service/scroll-spy.service';\n\nconst directives: any[] = [\n  ScrollSpyDirective,\n  ScrollSpyItemDirective,\n];\n\nconst components: any[] = [\n  ScrollSpySectionComponent\n];\n\nconst providers: Provider[] = [\n  ScrollSpyService\n];\n\n/**\n * A simple lightweight library for Angular 2/4+ which automatically\n * updates links to indicate the currently active section in the viewport\n *\n * @export\n * @class ScrollSpyModule\n */\n@NgModule({\n  imports: [\n    InViewportModule\n  ],\n  declarations: [\n    ...directives,\n    ...components\n  ],\n  exports: [\n    ...directives,\n    ...components\n  ]\n})\nexport class ScrollSpyModule {\n  /**\n   * Specify a static method for root module to ensure providers are\n   * only provided once but allows the module to still be imported\n   * into other modules without reproviding services.\n   *\n   * @static\n   * @returns {ModuleWithProviders}\n   * @memberof ScrollSpyModule\n   */\n  public static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: ScrollSpyModule,\n      providers: [\n        ...providers\n      ]\n    };\n  }\n}\n",
    "import { Component, Input } from '@angular/core';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * A component to wrap section content within that will update the\n * `ScrollSpyService` when it's in view\n *\n * @example\n * ```\n *  <sn-scroll-spy-section id=\"section1\" for=\"foo\">\n *    ...\n *  </sn-scroll-spy-section>\n * ```\n *\n * @export\n * @class ScrollSpySectionComponent\n */\n@Component({\n  selector: 'sn-scroll-spy-section',\n  template: `\n    <div\n      class=\"sn-hidden\"\n      snInViewport\n      (inViewportChange)=\"onInViewportChange($event)\"\n      [debounce]=\"debounce\">\n    </div>\n    <ng-content></ng-content>\n  `,\n  styles: [`\n    :host {\n      display: block;\n      position: relative; }\n\n    .sn-hidden {\n      bottom: 0;\n      left: 0;\n      opacity: 0;\n      position: absolute;\n      right: 0;\n      top: 0;\n      z-index: -1; }\n  `]\n})\nexport class ScrollSpySectionComponent {\n  /**\n   * Identifies the section\n   *\n   * @type {string}\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public id: string;\n  /**\n   * Specifies which `ScrollSpy` instance to update\n   *\n   * @type {string}\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public for: string;\n  /**\n   * Amount of time in ms to wait for other scroll events\n   * before running event handler\n   *\n   * @type {number}\n   * @default 0\n   * @memberof ScrollSpySectionComponent\n   */\n  @Input()\n  public debounce = 0;\n  /**\n   * Creates an instance of ScrollSpySectionComponent.\n   * @param {ScrollSpyService} scrollSpySvc\n   * @memberof ScrollSpySectionComponent\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) { }\n  /**\n   * Updates `ScrollSpy` section when element enters/leaves viewport\n   *\n   * @param {boolean} inViewport\n   * @memberof ScrollSpySectionComponent\n   */\n  public onInViewportChange(inViewport: boolean): void {\n    this.scrollSpySvc.setSpySectionStatus(this.id, this.for, inViewport);\n  }\n}\n",
    "import {\n  Directive, ContentChildren, QueryList, AfterViewInit,\n  Input, OnDestroy\n} from '@angular/core';\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { ScrollSpyService } from '../scroll-spy-service/scroll-spy.service';\n\n/**\n * Adds `active` class to navigation links when section is in the viewport.\n * Used in conjuction with `snScrollItem` directive which should be added\n * to anchor links in the nav\n *\n * @example\n * ```\n * <ul role=\"navigation\" snScrollSpy id=\"foo\">\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section2\">Section 2</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section3\">Section 3</a></li>\n *  <li><a snScrollSpyItem for=\"foo\" href=\"#section4\">Section 4</a></li>\n * </ul>\n * ```\n *\n * @export\n * @class ScrollSpyDirective\n * @implements {AfterViewInit}\n * @implements {OnDestroy}\n */\n@Directive({\n  selector: '[snScrollSpy]',\n  queries: {\n    spyItems: new ContentChildren(ScrollSpyItemDirective)\n  }\n})\nexport class ScrollSpyDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Collection of `ScrollSpyItem`. They are the list of\n   * nav items.\n   *\n   * @type {QueryList<ScrollSpyItemDirective>}\n   * @memberof ScrollSpyDirective\n   */\n  @ContentChildren(ScrollSpyItemDirective)\n  public items: QueryList<ScrollSpyItemDirective>;\n  /**\n   * ID of scrollSpy instance\n   *\n   * @type {string}\n   * @memberof ScrollSpyDirective\n   */\n  @Input()\n  public id: string;\n  /**\n   * Creates an instance of ScrollSpyDirective.\n   * @param {ScrollSpyService} scrollSpySvc\n   * @memberof ScrollSpyDirective\n   */\n  constructor(private scrollSpySvc: ScrollSpyService) { }\n  /**\n   * Adds spy to list of spys in `ScrollSpyService`\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngAfterViewInit(): void {\n    this.scrollSpySvc.addSpy(this.id, this.items);\n  }\n  /**\n   * Remove spy from list of spys when directive is destroyed\n   *\n   * @memberof ScrollSpyDirective\n   */\n  public ngOnDestroy(): void {\n    this.scrollSpySvc.removeSpy(this.id);\n  }\n}\n",
    "import { Injectable, QueryList } from '@angular/core';\n\nimport { ScrollSpyItemDirective } from '../scroll-spy-item/scroll-spy-item.directive';\nimport { Spy } from '../shared/spy.model';\n\n/**\n * Service that stores a list of `Spy`'s and the state\n * of their nav items `inViewport` and `active` state\n *\n * @export\n * @class ScrollSpyService\n */\n@Injectable()\nexport class ScrollSpyService {\n  /**\n   * List of `Spy`'s\n   *\n   * @type {Spy[]}\n   * @memberof ScrollSpyService\n   */\n  public spys: Spy[] = [];\n  /**\n   * Stores requests to add items to spy when spy hasn't been created\n   * yet. Once spy has been added then request will be made again.\n   *\n   * @type {any[]}\n   * @memberof ScrollSpyService\n   */\n  public buffer: any[] = [];\n  /**\n   * Add spy to list of `spys`\n   *\n   * @param {string} id\n   * @param {QueryList<ScrollSpyItemDirective>} items\n   * @memberof ScrollSpyService\n   */\n  public addSpy(id: string, items: QueryList<ScrollSpyItemDirective>): void {\n    this.spys.push({ id, items });\n    const buffer = this.buffer.filter((i) => i.spyId === id);\n    this.buffer = this.buffer.filter((i) => i.spyId !== id);\n    buffer.forEach((i) => this.setSpySectionStatus(i.sectionId, i.spyId, i.inViewport));\n  }\n  /**\n   * Remove spy from list of `spys`\n   *\n   * @param {string} id\n   * @memberof ScrollSpyService\n   */\n  public removeSpy(id: string): void {\n    const i = this.spys.findIndex((s) => s.id === id);\n    this.spys.splice(i, 1);\n  }\n  /**\n   * Set the `inViewport` status for a spy item then sets the active\n   * to true for the first item in the list that has `inViewport`\n   * set to true\n   *\n   * @param {string} sectionId\n   * @param {string} spyId\n   * @param {boolean} inViewport\n   * @returns {void}\n   * @memberof ScrollSpyService\n   */\n  public setSpySectionStatus(sectionId: string, spyId: string, inViewport: boolean): void {\n    const spy = this.spys.find((s) => s.id === spyId);\n    if (!spy) {\n      this.buffer.push({ sectionId, spyId, inViewport });\n      return;\n    }\n    const item = spy.items.find((i) => i.section === sectionId);\n    if (!item) { return; }\n\n    item.inViewport = inViewport;\n    const firstInViewport = spy.items.filter((i) => i.inViewport)[0];\n    spy.items.forEach((i) => i.active = false);\n\n    if (firstInViewport) {\n      firstInViewport.active = true;\n      firstInViewport.detectChanges();\n    }\n  }\n}\n",
    "import { Directive, Input, HostBinding, ChangeDetectorRef } from '@angular/core';\n\n/**\n * A directive used to add an `active` class to a nav item\n * when the section is in the viewport\n *\n * @example\n * ```\n * <a snScrollSpyItem for=\"foo\" href=\"#section1\">Section 1</a>\n * ```\n *\n * @export\n * @class ScrollSpyItemDirective\n * @implements {AfterViewInit}\n * @implements {OnDestroy}\n */\n@Directive({\n  selector: '[snScrollSpyItem]'\n})\nexport class ScrollSpyItemDirective {\n  /**\n   * True if the nav item is the active item in the `items` list\n   * for `ScrollSpyDirective` instance\n   *\n   * @type {boolean}\n   * @memberof ScrollSpyItemDirective\n   */\n  @HostBinding('class.active')\n  public active = false;\n  /**\n   * ID of `ScrollSpyDirective` instance\n   *\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public for: string;\n  /**\n   * Hash for section to link to\n   *\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  @Input()\n  public href: string;\n  /**\n   * If true means the section is in the viewport\n   *\n   * @type {boolean}\n   * @memberof ScrollSpyItemDirective\n   */\n  public inViewport = false;\n  /**\n   * Id of section that links navigates to\n   *\n   * @readonly\n   * @type {string}\n   * @memberof ScrollSpyItemDirective\n   */\n  public get section(): string {\n    return this.href.replace('#', '');\n  }\n  /**\n   * Creates an instance of ScrollSpyItemDirective.\n   * @param {ChangeDetectorRef} cdRef\n   * @memberof ScrollSpyItemDirective\n   */\n  constructor(private cdRef: ChangeDetectorRef) { }\n  /**\n   * Manually trigger change detection\n   *\n   * @memberof ScrollSpyItemDirective\n   */\n  public detectChanges(): void {\n    this.cdRef.detectChanges();\n  }\n}\n"
  ],
  "names": [
    "__decorate",
    "__metadata"
  ],
  "mappings": "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"
}
